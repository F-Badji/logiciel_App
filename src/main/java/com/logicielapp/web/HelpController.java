package com.logicielapp.web;

import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.http.ResponseEntity;
import java.util.*;

@Controller
@RequestMapping("/help")
public class HelpController {

    @GetMapping
    public String helpPage() {
        return "aide";
    }

    @GetMapping("/api/contact-info")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getContactInfo() {
        Map<String, Object> contactInfo = new HashMap<>();
        
        // Informations de contact
        Map<String, Object> whatsapp = new HashMap<>();
        whatsapp.put("number", "221769719383");
        whatsapp.put("displayNumber", "76-971-93-83");
        whatsapp.put("url", "https://wa.me/221769719383");
        whatsapp.put("availability", "24h/24, 7j/7");
        
        Map<String, Object> email = new HashMap<>();
        email.put("address", "digitex.officiel@gmail.com");
        email.put("responseTime", "R√©ponse sous 24h");
        
        contactInfo.put("whatsapp", whatsapp);
        contactInfo.put("email", email);
        
        return ResponseEntity.ok(contactInfo);
    }

    @GetMapping("/api/faq")
    @ResponseBody
    public ResponseEntity<List<Map<String, Object>>> getFAQ() {
        List<Map<String, Object>> faqList = new ArrayList<>();
        
        faqList.add(createFAQItem(
            "Comment v√©rifier un IMEI ?",
            "Entrez simplement votre num√©ro IMEI de 15 chiffres dans le champ pr√©vu √† cet effet sur la page d'accueil et cliquez sur \"V√©rifier IMEI\". Notre syst√®me utilisera plusieurs APIs pour r√©cup√©rer les informations compl√®tes de votre appareil."
        ));
        
        faqList.add(createFAQItem(
            "Que faire si mon IMEI est d√©tect√© comme fake ?",
            "Si votre IMEI est d√©tect√© comme fake, cela signifie qu'il ne respecte pas les standards GSMA ou qu'il contient des patterns invalides (tous les chiffres identiques, s√©quences, etc.). V√©rifiez que vous avez saisi le bon IMEI depuis les param√®tres de votre t√©l√©phone."
        ));
        
        faqList.add(createFAQItem(
            "Quelles informations puis-je obtenir ?",
            "Notre syst√®me peut r√©cup√©rer : la marque et le mod√®le, la couleur et la capacit√© de stockage, le statut de verrouillage op√©rateur, le statut de liste noire, les informations de garantie, le statut d'activation, et pour les appareils Apple, le statut iCloud."
        ));
        
        faqList.add(createFAQItem(
            "Les donn√©es sont-elles s√©curis√©es ?",
            "Oui, nous prenons la s√©curit√© tr√®s au s√©rieux. Les IMEI sont partiellement masqu√©s dans les logs, toutes les communications sont chiffr√©es, et nous ne stockons aucune donn√©e personnelle de mani√®re permanente."
        ));
        
        faqList.add(createFAQItem(
            "Comment contacter le support ?",
            "Vous pouvez nous contacter directement via WhatsApp au 76-971-93-83 ou par email √† digitex.officiel@gmail.com. Notre √©quipe est disponible pour r√©pondre √† toutes vos questions et vous aider avec le d√©blocage de vos appareils."
        ));
        
        return ResponseEntity.ok(faqList);
    }

    @GetMapping("/api/features")
    @ResponseBody
    public ResponseEntity<List<Map<String, Object>>> getFeatures() {
        List<Map<String, Object>> features = new ArrayList<>();
        
        features.add(createFeature("üîç", "V√©rification IMEI", "V√©rification compl√®te avec base TAC GSMA √©tendue"));
        features.add(createFeature("üõ°Ô∏è", "D√©tection Fake", "D√©tection automatique des IMEI invalides"));
        features.add(createFeature("üìä", "Statistiques", "Tableau de bord complet avec m√©triques"));
        features.add(createFeature("‚öôÔ∏è", "Configuration", "Param√®tres avanc√©s et personnalisation"));
        
        return ResponseEntity.ok(features);
    }

    @PostMapping("/api/contact")
    @ResponseBody
    public ResponseEntity<Map<String, String>> submitContactForm(@RequestBody Map<String, String> contactForm) {
        // Validation des donn√©es
        if (!contactForm.containsKey("name") || contactForm.get("name").trim().isEmpty()) {
            Map<String, String> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Le nom est requis");
            return ResponseEntity.badRequest().body(error);
        }
        
        if (!contactForm.containsKey("email") || contactForm.get("email").trim().isEmpty()) {
            Map<String, String> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "L'email est requis");
            return ResponseEntity.badRequest().body(error);
        }
        
        if (!contactForm.containsKey("message") || contactForm.get("message").trim().isEmpty()) {
            Map<String, String> error = new HashMap<>();
            error.put("status", "error");
            error.put("message", "Le message est requis");
            return ResponseEntity.badRequest().body(error);
        }
        
        // Ici vous pourriez envoyer l'email ou sauvegarder le message
        System.out.println("Nouveau message de contact re√ßu:");
        System.out.println("Nom: " + contactForm.get("name"));
        System.out.println("Email: " + contactForm.get("email"));
        System.out.println("Message: " + contactForm.get("message"));
        
        Map<String, String> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", "Votre message a √©t√© envoy√© avec succ√®s. Nous vous r√©pondrons dans les plus brefs d√©lais.");
        return ResponseEntity.ok(response);
    }

    private Map<String, Object> createFAQItem(String question, String answer) {
        Map<String, Object> faq = new HashMap<>();
        faq.put("question", question);
        faq.put("answer", answer);
        return faq;
    }

    private Map<String, Object> createFeature(String icon, String title, String description) {
        Map<String, Object> feature = new HashMap<>();
        feature.put("icon", icon);
        feature.put("title", title);
        feature.put("description", description);
        return feature;
    }
}
