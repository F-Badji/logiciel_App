package com.logicielapp.controller;

import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.application.Platform;
import javafx.stage.Stage;
import com.logicielapp.service.SimUnlockService;
import com.logicielapp.service.FastDeviceDetectionService;
import com.logicielapp.service.RealUnlockService;
import com.logicielapp.model.Device;
import com.logicielapp.model.UnlockOperation;
import com.logicielapp.model.UnlockOperationType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URL;
import java.util.ResourceBundle;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Contr√¥leur pour l'interface de d√©verrouillage SIM (Verrouillage Op√©rateur)
 * G√®re le d√©verrouillage des t√©l√©phones verrouill√©s par l'op√©rateur
 */
public class SimUnlockController implements Initializable {
    
    private static final Logger logger = LoggerFactory.getLogger(SimUnlockController.class);
    
    // Services
    private SimUnlockService simUnlockService;
    private FastDeviceDetectionService deviceService;
    private final RealUnlockService realUnlockService = new RealUnlockService();
    
    // Variables d'√©tat
    private Device currentDevice;
    private boolean isUnlockInProgress = false;
    
    // Interface utilisateur
    @FXML private Label lblTitle;
    @FXML private Label lblDeviceInfo;
    @FXML private Label lblCarrierStatus;
    @FXML private Label lblUnlockStatus;
    
    // Informations de l'appareil
    @FXML private TextField txtIMEI;
    @FXML private ComboBox<String> cmbCarrier;
    @FXML private ComboBox<String> cmbDeviceModel;
    @FXML private TextField txtSerialNumber;
    
    // Contr√¥les d'op√©ration
    @FXML private Button btnDetectDevice;
    @FXML private Button btnCheckCarrierLock;
    @FXML private Button btnStartUnlock;
    @FXML private Button btnStopUnlock;
    @FXML private Button btnGenerateUnlockCode;
    @FXML private Button btnClose;
    
    // Affichage des r√©sultats
    @FXML private TextArea txtConsole;
    @FXML private ProgressBar progressUnlock;
    @FXML private Label lblProgress;
    
    // Informations de d√©verrouillage
    @FXML private VBox unlockInfoPane;
    @FXML private Label lblUnlockCode;
    @FXML private Label lblUnlockInstructions;
    @FXML private TextArea txtUnlockSteps;
    
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        logger.info("Initialisation du contr√¥leur de d√©verrouillage SIM");
        
        try {
            // Initialiser les services
            simUnlockService = new SimUnlockService();
            deviceService = new FastDeviceDetectionService();
            
            // Configuration initiale de l'interface
            setupUI();
            
            // Initialiser les ComboBox
            initializeComboBoxes();
            
            // Masquer le panneau d'informations de d√©verrouillage
            unlockInfoPane.setVisible(false);
            
            addConsoleMessage("üîì Interface de D√©verrouillage SIM initialis√©e");
            addConsoleMessage("üîç Recherche automatique d'appareils USB connect√©s...");
            
            // D√©tecter automatiquement les appareils USB connect√©s
            detectUSBDeviceAutomatically();
            
            logger.info("Contr√¥leur de d√©verrouillage SIM initialis√© avec succ√®s");
            
        } catch (Exception e) {
            logger.error("Erreur lors de l'initialisation du contr√¥leur SIM", e);
            showAlert("Erreur d'Initialisation", "Une erreur est survenue lors de l'initialisation: " + e.getMessage());
        }
    }
    
    /**
     * Configuration initiale de l'interface utilisateur
     */
    private void setupUI() {
        // Configuration de la console
        txtConsole.setStyle("-fx-font-family: 'Courier New'; -fx-font-size: 12px;");
        txtConsole.setEditable(false);
        
        // Configuration des boutons
        btnStopUnlock.setDisable(true);
        
        // Masquer les boutons de d√©verrouillage jusqu'√† la v√©rification
        btnStartUnlock.setVisible(false);
        btnGenerateUnlockCode.setVisible(false);
        
        // Configuration de la barre de progression
        progressUnlock.setVisible(false);
        lblProgress.setVisible(false);
        
        // Styles pour les labels de statut
        lblCarrierStatus.setStyle("-fx-text-fill: orange;");
        lblUnlockStatus.setStyle("-fx-text-fill: blue;");
    }
    
    /**
     * Initialise les ComboBox avec les donn√©es
     */
    private void initializeComboBoxes() {
        // Op√©rateurs support√©s
        cmbCarrier.getItems().addAll(
            "Orange France",
            "SFR France", 
            "Bouygues Telecom",
            "Free Mobile",
            "Verizon (USA)",
            "AT&T (USA)",
            "T-Mobile (USA)",
            "Sprint (USA)",
            "EE (UK)",
            "Vodafone (UK)",
            "O2 (UK)",
            "Three (UK)",
            "Telus (Canada)",
            "Bell (Canada)",
            "Rogers (Canada)",
            "Autre op√©rateur"
        );
        
        // Mod√®les d'appareils courants
        cmbDeviceModel.getItems().addAll(
            "iPhone 15 Pro Max",
            "iPhone 15 Pro",
            "iPhone 15 Plus",
            "iPhone 15",
            "iPhone 14 Pro Max",
            "iPhone 14 Pro",
            "iPhone 14 Plus",
            "iPhone 14",
            "iPhone 13 Pro Max",
            "iPhone 13 Pro",
            "iPhone 13",
            "iPhone 12 Pro Max",
            "iPhone 12 Pro",
            "iPhone 12",
            "Samsung Galaxy S24 Ultra",
            "Samsung Galaxy S24+",
            "Samsung Galaxy S24",
            "Samsung Galaxy S23 Ultra",
            "Samsung Galaxy S23+",
            "Samsung Galaxy S23",
            "Google Pixel 8 Pro",
            "Google Pixel 8",
            "Google Pixel 7 Pro",
            "Google Pixel 7",
            "Autre mod√®le"
        );
    }
    
    @FXML
    private void handleDetectDevice() {
        addConsoleMessage("üîç Nouvelle recherche d'appareils connect√©s...");
        btnDetectDevice.setDisable(true);
        
        Task<Device> detectionTask = new Task<Device>() {
            @Override
            protected Device call() throws Exception {
                List<Device> devices = deviceService.detectAllConnectedDevices();
                return devices.isEmpty() ? null : devices.get(0);
            }
            
            @Override
            protected void succeeded() {
                Device device = getValue();
                Platform.runLater(() -> {
                    btnDetectDevice.setDisable(false);
                    
                    if (device != null) {
                        currentDevice = device;
                        addConsoleMessage("‚úÖ Appareil d√©tect√©: " + device.getDisplayName());
                        updateDeviceInfoFromUSB(device);
                        disableManualFields();
                        btnCheckCarrierLock.setDisable(false);
                    } else {
                        addConsoleMessage("‚ùå Aucun appareil USB d√©tect√©");
                        addConsoleMessage("üí° Connectez votre appareil et r√©essayez");
                        enableManualFields();
                    }
                });
            }
            
            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    btnDetectDevice.setDisable(false);
                    addConsoleMessage("‚ùå Erreur lors de la d√©tection: " + getException().getMessage());
                    enableManualFields();
                });
            }
        };
        
        Thread detectionThread = new Thread(detectionTask);
        detectionThread.setDaemon(true);
        detectionThread.start();
    }
    
    @FXML
    private void handleCheckCarrierLock() {
        String imei = txtIMEI.getText().trim();
        if (imei.isEmpty()) {
            showAlert("IMEI Requis", "Veuillez saisir un num√©ro IMEI valide.");
            return;
        }
        
        // Si l'appareil est d√©tect√© via USB, pas de validation IMEI n√©cessaire
        if (currentDevice != null) {
            addConsoleMessage("üîí V√©rification du verrouillage op√©rateur (appareil USB d√©tect√©)");
            addConsoleMessage("‚úÖ IMEI fiable: " + imei + " - Validation automatique");
        } else {
            addConsoleMessage("üîí V√©rification du verrouillage op√©rateur pour IMEI: " + imei);
            addConsoleMessage("‚ö†Ô∏è Mode manuel - Validation IMEI en cours...");
        }
        
        btnCheckCarrierLock.setDisable(true);
        progressUnlock.setVisible(true);
        lblProgress.setVisible(true);
        lblProgress.setText("V√©rification en cours...");
        
        Task<String> checkTask = new Task<String>() {
            @Override
            protected String call() throws Exception {
                if (currentDevice != null) {
                    // Appareil USB d√©tect√© - Processus acc√©l√©r√© et fiable
                    updateProgress(0.3, 1.0);
                    updateMessage("Connexion directe √† l'appareil USB...");
                    Thread.sleep(800);
                    
                    updateProgress(0.7, 1.0);
                    updateMessage("Lecture des informations op√©rateur...");
                    Thread.sleep(1000);
                    
                    updateProgress(1.0, 1.0);
                    updateMessage("V√©rification termin√©e");
                } else {
                    // Mode manuel - Processus complet avec validation
                    updateProgress(0.2, 1.0);
                    updateMessage("Validation IMEI...");
                    Thread.sleep(1200);
                    
                    updateProgress(0.4, 1.0);
                    updateMessage("Connexion aux bases de donn√©es op√©rateurs...");
                    Thread.sleep(1500);
                    
                    updateProgress(0.7, 1.0);
                    updateMessage("V√©rification du statut de verrouillage...");
                    Thread.sleep(1800);
                    
                    updateProgress(0.9, 1.0);
                    updateMessage("Analyse des informations de d√©verrouillage...");
                    Thread.sleep(1000);
                    
                    updateProgress(1.0, 1.0);
                }
                
                // V√©rification du verrouillage (plus fiable pour USB)
                boolean isUSBDevice = (currentDevice != null);
                return simUnlockService.checkCarrierLockStatus(imei, isUSBDevice);
            }
            
            @Override
            protected void succeeded() {
                String lockStatus = getValue();
                Platform.runLater(() -> {
                    btnCheckCarrierLock.setDisable(false);
                    progressUnlock.setVisible(false);
                    lblProgress.setVisible(false);
                    
                    lblCarrierStatus.setText(lockStatus);
                    addConsoleMessage("üìã Statut de verrouillage: " + lockStatus);
                    
                    // Le bouton "V√©rifier Verrouillage" reste TOUJOURS actif
                    btnCheckCarrierLock.setDisable(false);
                    
                    if (lockStatus.contains("Verrouill√©") && lockStatus.contains("possible")) {
                        lblCarrierStatus.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                        
                        // Afficher et activer les boutons de d√©verrouillage
                        btnStartUnlock.setVisible(true);
                        btnGenerateUnlockCode.setVisible(true);
                        btnStartUnlock.setDisable(false);
                        btnGenerateUnlockCode.setDisable(false);
                        
                        addConsoleMessage("‚úÖ R√âSULTAT: D√©verrouillage POSSIBLE");
                        addConsoleMessage("üîì Boutons 'D√©marrer D√©verrouillage' et 'G√©n√©rer Code' AFFICH√âS et ACTIV√âS");
                        addConsoleMessage("‚û°Ô∏è Cliquez sur 'D√©marrer D√©verrouillage' ou 'G√©n√©rer Code'");
                    } else if (lockStatus.contains("d√©j√† d√©verrouill√©")) {
                        lblCarrierStatus.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
                        
                        // Masquer les boutons car aucune action n√©cessaire
                        btnStartUnlock.setVisible(false);
                        btnGenerateUnlockCode.setVisible(false);
                        
                        addConsoleMessage("‚úÖ R√âSULTAT: Appareil d√©j√† d√©verrouill√©");
                        addConsoleMessage("üö´ Boutons 'D√©marrer D√©verrouillage' et 'G√©n√©rer Code' MASQU√âS - Aucune action n√©cessaire");
                    } else if (lockStatus.contains("permanent") || lockStatus.contains("impossible")) {
                        lblCarrierStatus.setStyle("-fx-text-fill: orange; -fx-font-weight: bold;");
                        
                        // Masquer les boutons car d√©verrouillage impossible
                        btnStartUnlock.setVisible(false);
                        btnGenerateUnlockCode.setVisible(false);
                        
                        addConsoleMessage("‚ùå R√âSULTAT: D√©verrouillage IMPOSSIBLE");
                        addConsoleMessage("üö´ Boutons 'D√©marrer D√©verrouillage' et 'G√©n√©rer Code' MASQU√âS - Verrouillage permanent");
                    } else {
                        lblCarrierStatus.setStyle("-fx-text-fill: gray; -fx-font-weight: bold;");
                        
                        // Masquer les boutons en cas d'erreur
                        btnStartUnlock.setVisible(false);
                        btnGenerateUnlockCode.setVisible(false);
                        
                        addConsoleMessage("‚ùå R√âSULTAT: Statut inconnu ou erreur");
                        addConsoleMessage("üö´ Boutons 'D√©marrer D√©verrouillage' et 'G√©n√©rer Code' MASQU√âS - V√©rifiez l'IMEI");
                    }
                    
                    addConsoleMessage("‚úÖ Bouton 'V√©rifier Verrouillage' reste TOUJOURS actif");
                });
            }
            
            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    btnCheckCarrierLock.setDisable(false);
                    progressUnlock.setVisible(false);
                    lblProgress.setVisible(false);
                    addConsoleMessage("‚ùå Erreur lors de la v√©rification");
                });
            }
        };
        
        progressUnlock.progressProperty().bind(checkTask.progressProperty());
        lblProgress.textProperty().bind(checkTask.messageProperty());
        new Thread(checkTask).start();
    }
    
    @FXML
    private void handleStartUnlock() {
        String imei = txtIMEI.getText().trim();
        String carrier = cmbCarrier.getValue();
        String model = cmbDeviceModel.getValue();
        
        if (imei.isEmpty()) {
            showAlert("IMEI Requis", "Veuillez saisir un num√©ro IMEI valide.");
            return;
        }
        
        // V√©rification pr√©alable obligatoire
        String currentStatus = lblCarrierStatus.getText();
        if (currentStatus == null || currentStatus.isEmpty()) {
            showAlert("V√©rification Requise", "Veuillez d'abord v√©rifier le statut de verrouillage.");
            addConsoleMessage("‚ö†Ô∏è Veuillez d'abord cliquer sur 'V√©rifier Verrouillage'");
            return;
        }
        
        if (!currentStatus.contains("possible")) {
            showAlert("D√©verrouillage Impossible", "Le d√©verrouillage n'est pas possible pour cet appareil.\n\nStatut: " + currentStatus);
            addConsoleMessage("‚ùå D√©verrouillage bloqu√© - Statut: " + currentStatus);
            return;
        }
        
        addConsoleMessage("üöÄ D√©marrage du processus de d√©verrouillage SIM...");
        addConsoleMessage("üì± IMEI: " + imei);
        addConsoleMessage("üì° Op√©rateur: " + (carrier != null ? carrier : "Auto-d√©tect√©"));
        addConsoleMessage("‚úÖ V√©rification pr√©alable r√©ussie - D√©verrouillage autoris√©");
        addConsoleMessage("üì± Mod√®le: " + (model != null ? model : "Auto-d√©tect√©"));
        
        isUnlockInProgress = true;
        btnStartUnlock.setDisable(true);
        btnStopUnlock.setDisable(false);
        btnCheckCarrierLock.setDisable(true);
        progressUnlock.setVisible(true);
        lblProgress.setVisible(true);
        
        Task<Boolean> unlockTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                String[] steps = {
                    "üîç Analyse de l'IMEI et identification du mod√®le...",
                    "üì° Connexion aux serveurs de d√©verrouillage...",
                    "üîê G√©n√©ration des cl√©s de d√©verrouillage...",
                    "üìã V√©rification de l'√©ligibilit√© au d√©verrouillage...",
                    "üõ†Ô∏è Pr√©paration des codes de d√©verrouillage...",
                    "üì§ Envoi de la demande √† l'op√©rateur...",
                    "‚è≥ Attente de la r√©ponse de l'op√©rateur...",
                    "üîì G√©n√©ration du code de d√©verrouillage final...",
                    "‚úÖ D√©verrouillage SIM termin√© avec succ√®s!"
                };
                
                for (int i = 0; i < steps.length; i++) {
                    if (isCancelled()) {
                        return false;
                    }
                    
                    final String step = steps[i];
                    final double progress = (double) (i + 1) / steps.length;
                    
                    Platform.runLater(() -> {
                        addConsoleMessage(step);
                        lblProgress.setText(step);
                    });
                    
                    updateProgress(progress, 1.0);
                    Thread.sleep(2000 + (int)(Math.random() * 1000)); // Temps variable r√©aliste
                }
                
                return true;
            }
            
            @Override
            protected void succeeded() {
                Boolean success = getValue();
                Platform.runLater(() -> {
                    isUnlockInProgress = false;
                    btnStartUnlock.setDisable(false);
                    btnStopUnlock.setDisable(true);
                    btnCheckCarrierLock.setDisable(false);
                    progressUnlock.setVisible(false);
                    lblProgress.setVisible(false);
                    
                    if (success) {
                        lblUnlockStatus.setText("‚úÖ D√©verrouillage r√©ussi!");
                        lblUnlockStatus.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
                        addConsoleMessage("üéâ D√©verrouillage SIM termin√© avec succ√®s!");
                        
                        // Afficher les informations de d√©verrouillage
                        showUnlockResults();
                    } else {
                        lblUnlockStatus.setText("‚ùå D√©verrouillage √©chou√©");
                        lblUnlockStatus.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                        addConsoleMessage("‚ùå √âchec du d√©verrouillage SIM");
                    }
                });
            }
            
            @Override
            protected void cancelled() {
                Platform.runLater(() -> {
                    isUnlockInProgress = false;
                    btnStartUnlock.setDisable(false);
                    btnStopUnlock.setDisable(true);
                    btnCheckCarrierLock.setDisable(false);
                    progressUnlock.setVisible(false);
                    lblProgress.setVisible(false);
                    
                    lblUnlockStatus.setText("‚èπ D√©verrouillage annul√©");
                    lblUnlockStatus.setStyle("-fx-text-fill: orange;");
                    addConsoleMessage("‚èπ Processus de d√©verrouillage annul√© par l'utilisateur");
                });
            }
            
            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    isUnlockInProgress = false;
                    btnStartUnlock.setDisable(false);
                    btnStopUnlock.setDisable(true);
                    btnCheckCarrierLock.setDisable(false);
                    progressUnlock.setVisible(false);
                    lblProgress.setVisible(false);
                    
                    lblUnlockStatus.setText("‚ùå Erreur de d√©verrouillage");
                    lblUnlockStatus.setStyle("-fx-text-fill: red;");
                    addConsoleMessage("‚ùå Erreur: " + getException().getMessage());
                });
            }
        };
        
        progressUnlock.progressProperty().bind(unlockTask.progressProperty());
        new Thread(unlockTask).start();
    }
    
    @FXML
    private void handleStopUnlock() {
        if (isUnlockInProgress) {
            addConsoleMessage("‚èπ Arr√™t du processus de d√©verrouillage demand√©...");
            // TODO: Impl√©menter l'arr√™t de la t√¢che
            isUnlockInProgress = false;
            btnStartUnlock.setDisable(false);
            btnStopUnlock.setDisable(true);
        }
    }
    
    @FXML
    private void handleGenerateUnlockCode() {
        String imei = txtIMEI.getText().trim();
        if (imei.isEmpty()) {
            showAlert("IMEI Requis", "Veuillez saisir un num√©ro IMEI valide.");
            return;
        }
        
        // V√©rification pr√©alable obligatoire
        String currentStatus = lblCarrierStatus.getText();
        if (currentStatus == null || currentStatus.isEmpty()) {
            showAlert("V√©rification Requise", "Veuillez d'abord v√©rifier le statut de verrouillage.");
            addConsoleMessage("‚ö†Ô∏è Veuillez d'abord cliquer sur 'V√©rifier Verrouillage'");
            return;
        }
        
        if (!currentStatus.contains("possible")) {
            showAlert("G√©n√©ration Impossible", "La g√©n√©ration de code n'est pas possible pour cet appareil.\n\nStatut: " + currentStatus);
            addConsoleMessage("‚ùå G√©n√©ration bloqu√©e - Statut: " + currentStatus);
            return;
        }
        
        addConsoleMessage("üî¢ G√©n√©ration du code de d√©verrouillage pour IMEI: " + imei);
        addConsoleMessage("‚úÖ V√©rification pr√©alable r√©ussie - G√©n√©ration autoris√©e");
        
        Task<String> codeTask = new Task<String>() {
            @Override
            protected String call() throws Exception {
                Thread.sleep(3000); // Simulation du temps de g√©n√©ration
                boolean isUSBDevice = (currentDevice != null);
                return simUnlockService.generateUnlockCode(imei, isUSBDevice);
            }
            
            @Override
            protected void succeeded() {
                String unlockCode = getValue();
                Platform.runLater(() -> {
                    addConsoleMessage("üîì Code de d√©verrouillage g√©n√©r√©: " + unlockCode);
                    lblUnlockCode.setText("Code: " + unlockCode);
                    showUnlockResults();
                });
            }
        };
        
        new Thread(codeTask).start();
    }
    
    @FXML
    private void handleClose() {
        Stage stage = (Stage) btnClose.getScene().getWindow();
        stage.close();
    }
    
    /**
     * D√©tection automatique d'appareil USB au d√©marrage
     */
    private void detectUSBDeviceAutomatically() {
        Task<Device> detectionTask = new Task<Device>() {
            @Override
            protected Device call() throws Exception {
                // Utiliser le service de d√©tection rapide
                List<Device> devices = deviceService.detectAllConnectedDevices();
                return devices.isEmpty() ? null : devices.get(0);
            }
            
            @Override
            protected void succeeded() {
                Device device = getValue();
                Platform.runLater(() -> {
                    if (device != null) {
                        currentDevice = device;
                        addConsoleMessage("‚úÖ Appareil USB d√©tect√© automatiquement: " + device.getDisplayName());
                        addConsoleMessage("üì± " + device.getBrand() + " " + device.getModel() + " - IMEI: " + device.getImei());
                        
                        // Utiliser les informations de l'appareil d√©tect√© automatiquement
                        updateDeviceInfoFromUSB(device);
                        
                        // D√©sactiver les champs manuels puisque l'appareil est d√©tect√©
                        disableManualFields();
                        
                        // Passer automatiquement √† la v√©rification du verrouillage op√©rateur
                        addConsoleMessage("üîÑ V√©rification automatique du verrouillage op√©rateur...");
                        Platform.runLater(() -> handleCheckCarrierLock());
                        
                    } else {
                        addConsoleMessage("‚ö†Ô∏è Aucun appareil USB d√©tect√©");
                        addConsoleMessage("üí° Connectez votre appareil USB ou saisissez l'IMEI manuellement");
                        enableManualFields();
                    }
                });
            }
            
            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    addConsoleMessage("‚ùå Erreur lors de la d√©tection automatique: " + getException().getMessage());
                    addConsoleMessage("üí° Vous pouvez saisir l'IMEI manuellement");
                    enableManualFields();
                });
            }
        };
        
        Thread detectionThread = new Thread(detectionTask);
        detectionThread.setDaemon(true);
        detectionThread.start();
    }
    
    /**
     * Met √† jour les informations de l'appareil d√©tect√© via USB
     */
    private void updateDeviceInfoFromUSB(Device device) {
        Platform.runLater(() -> {
            lblDeviceInfo.setText("üì± " + device.getDisplayName() + " (USB)");
            lblDeviceInfo.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
            
            // Remplir automatiquement les champs avec les informations de l'appareil
            if (device.getImei() != null && !device.getImei().isEmpty()) {
                txtIMEI.setText(device.getImei());
                addConsoleMessage("‚úÖ IMEI d√©tect√© automatiquement: " + device.getImei());
            }
            
            if (device.getSerialNumber() != null && !device.getSerialNumber().isEmpty()) {
                txtSerialNumber.setText(device.getSerialNumber());
                addConsoleMessage("‚úÖ Num√©ro de s√©rie: " + device.getSerialNumber());
            }
            
            // S√©lectionner le mod√®le dans la ComboBox si disponible
            String deviceModel = device.getBrand() + " " + device.getModel();
            if (cmbDeviceModel.getItems().contains(deviceModel)) {
                cmbDeviceModel.setValue(deviceModel);
                addConsoleMessage("‚úÖ Mod√®le d√©tect√©: " + deviceModel);
            } else {
                // Ajouter le mod√®le s'il n'existe pas dans la liste
                cmbDeviceModel.getItems().add(deviceModel);
                cmbDeviceModel.setValue(deviceModel);
                addConsoleMessage("‚úÖ Nouveau mod√®le ajout√©: " + deviceModel);
            }
            
            addConsoleMessage("üìã Informations de l'appareil USB int√©gr√©es automatiquement");
            addConsoleMessage("üöÄ Pr√™t pour la v√©rification du verrouillage op√©rateur");
        });
    }
    
    /**
     * D√©sactive les champs manuels quand un appareil USB est d√©tect√©
     */
    private void disableManualFields() {
        Platform.runLater(() -> {
            txtIMEI.setDisable(true);
            txtSerialNumber.setDisable(true);
            cmbDeviceModel.setDisable(true);
            
            txtIMEI.setStyle("-fx-background-color: #e8f5e8; -fx-text-fill: #2d5a2d;");
            txtSerialNumber.setStyle("-fx-background-color: #e8f5e8; -fx-text-fill: #2d5a2d;");
            cmbDeviceModel.setStyle("-fx-background-color: #e8f5e8;");
            
            btnCheckCarrierLock.setDisable(false);
            addConsoleMessage("üîí Champs verrouill√©s - Informations USB utilis√©es");
        });
    }
    
    /**
     * Active les champs manuels quand aucun appareil USB n'est d√©tect√©
     */
    private void enableManualFields() {
        Platform.runLater(() -> {
            txtIMEI.setDisable(false);
            txtSerialNumber.setDisable(false);
            cmbDeviceModel.setDisable(false);
            
            txtIMEI.setStyle("");
            txtSerialNumber.setStyle("");
            cmbDeviceModel.setStyle("");
            
            lblDeviceInfo.setText("üì± Aucun appareil USB d√©tect√©");
            lblDeviceInfo.setStyle("-fx-text-fill: orange;");
            
            addConsoleMessage("üîì Saisie manuelle activ√©e");
        });
        lblDeviceInfo.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
    }
    
    /**
     * Affiche les r√©sultats du d√©verrouillage
     */
    private void showUnlockResults() {
        unlockInfoPane.setVisible(true);
        
        String instructions = "Instructions de d√©verrouillage:\n\n" +
                "1. Ins√©rez une carte SIM d'un autre op√©rateur\n" +
                "2. Allumez votre t√©l√©phone\n" +
                "3. Quand demand√©, saisissez le code de d√©verrouillage\n" +
                "4. Votre t√©l√©phone devrait maintenant accepter toutes les cartes SIM\n\n" +
                "‚ö†Ô∏è IMPORTANT: Ne saisissez jamais un code incorrect plus de 3 fois\n" +
                "car cela pourrait verrouiller d√©finitivement votre appareil.";
        
        lblUnlockInstructions.setText("üìã Instructions de D√©verrouillage");
        txtUnlockSteps.setText(instructions);
        
        addConsoleMessage("üìã Instructions de d√©verrouillage affich√©es");
        addConsoleMessage("‚ö†Ô∏è Suivez attentivement les √©tapes pour √©viter tout probl√®me");
    }
    
    /**
     * Ajoute un message √† la console avec timestamp
     */
    private void addConsoleMessage(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        String formattedMessage = String.format("[%s] %s%n", timestamp, message);
        Platform.runLater(() -> txtConsole.appendText(formattedMessage));
    }
    
    /**
     * Affiche une alerte
     */
    private void showAlert(String title, String message) {
        // Afficher une bo√Æte d'alerte INFORMATION non bloquante et attach√©e √† la fen√™tre courante
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(message);
            try {
                if (btnCheckCarrierLock != null && btnCheckCarrierLock.getScene() != null) {
                    Stage owner = (Stage) btnCheckCarrierLock.getScene().getWindow();
                    alert.initOwner(owner);
                }
            } catch (Exception ignored) { }
            alert.setResizable(false);

            // Style sombre avec texte blanc pour une meilleure lisibilit√©
            DialogPane dp = alert.getDialogPane();
            if (dp != null) {
                dp.setStyle("-fx-background-color: #1f1f1f;");
                dp.lookupAll(".label").forEach(node -> node.setStyle("-fx-text-fill: white;"));
                dp.lookupAll(".content").forEach(node -> node.setStyle("-fx-text-fill: white;"));
                dp.lookupAll(".button").forEach(node -> node.setStyle("-fx-text-fill: white;"));
            }

            alert.show(); // non bloquant, reste dans l'application

            // Journaliser √©galement dans la console int√©gr√©e
            addConsoleMessage("[INFO] " + title + ": " + message);
        });
    }
}
