package com.logicielapp.controller;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import com.logicielapp.model.Device;
import com.logicielapp.service.FastDeviceDetectionService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.ArrayList;

/**
 * Contr√¥leur pour l'interface Jailbreaker iOS
 * G√®re l'exploitation des failles de s√©curit√© et le jailbreak des appareils iOS
 */
public class JailbreakerController implements Initializable {
    
    private static final Logger logger = LoggerFactory.getLogger(JailbreakerController.class);
    
    // Services
    private FastDeviceDetectionService deviceService;
    private AtomicBoolean isJailbreaking = new AtomicBoolean(false);
    private Task<Void> currentTask;
    
    // FXML Elements - D√©tection des appareils
    @FXML private Button detectBtn;
    @FXML private Button refreshBtn;
    @FXML private Label deviceCountLabel;
    @FXML private TableView<Device> deviceTable;
    @FXML private TableColumn<Device, String> deviceNameCol;
    @FXML private TableColumn<Device, String> deviceModelCol;
    @FXML private TableColumn<Device, String> deviceIOSCol;
    @FXML private TableColumn<Device, String> deviceIMEICol;
    @FXML private TableColumn<Device, String> deviceStatusCol;
    @FXML private TableColumn<Device, String> deviceJailbreakCol;
    @FXML private TableColumn<Device, String> deviceVulnCol;
    
    // FXML Elements - Analyse des vuln√©rabilit√©s
    @FXML private ListView<String> vulnerabilityList;
    @FXML private ListView<String> exploitList;
    @FXML private Button analyzeBtn;
    @FXML private Button loadExploitsBtn;
    @FXML private CheckBox advancedModeCheck;
    
    // FXML Elements - M√©thodes de jailbreak
    @FXML private RadioButton untetheredRadio;
    @FXML private RadioButton tetheredRadio;
    @FXML private RadioButton semiTetheredRadio;
    @FXML private RadioButton rootlessRadio;
    private ToggleGroup jailbreakMethodGroup;
    
    // FXML Elements - Configuration avanc√©e
    @FXML private CheckBox bypassCodeSignCheck;
    @FXML private CheckBox disableOTACheck;
    @FXML private CheckBox enableSSHCheck;
    @FXML private CheckBox installCydiaCheck;
    @FXML private CheckBox enableAFCCheck;
    @FXML private CheckBox patchKernelCheck;
    @FXML private CheckBox enableDebugCheck;
    @FXML private CheckBox backupSHSHCheck;
    
    // FXML Elements - Contr√¥les et progression
    @FXML private Button startJailbreakBtn;
    @FXML private Button stopBtn;
    @FXML private Button rebootBtn;
    @FXML private Label statusLabel;
    @FXML private ProgressBar progressBar;
    @FXML private Label progressLabel;
    
    // FXML Elements - Logs
    @FXML private TextArea logArea;
    @FXML private Button clearLogsBtn;
    @FXML private Button saveLogsBtn;
    @FXML private Button closeBtn;
    
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        logger.info("Initialisation du contr√¥leur Jailbreaker");
        
        // Initialisation des services
        deviceService = new FastDeviceDetectionService();
        
        // Configuration du tableau des appareils
        setupDeviceTable();
        
        // Configuration des groupes de boutons radio
        setupRadioGroups();
        
        // Configuration des listes
        setupLists();
        
        // Configuration initiale de l'UI
        setupInitialUI();
        
        // Configuration de la taille de fen√™tre apr√®s initialisation compl√®te
        Platform.runLater(this::setupWindowSize);
        
        addLogMessage("üîì Interface Jailbreaker initialis√©e - Pr√™t pour l'exploitation");
        addLogMessage("‚ö†Ô∏è ATTENTION: Utilisation √† des fins √©ducatives et de recherche uniquement");
    }
    
    private void setupDeviceTable() {
        deviceNameCol.setCellValueFactory(new PropertyValueFactory<>("deviceName"));
        deviceModelCol.setCellValueFactory(new PropertyValueFactory<>("model"));
        deviceIOSCol.setCellValueFactory(new PropertyValueFactory<>("osVersion"));
        deviceIMEICol.setCellValueFactory(new PropertyValueFactory<>("imei"));
        deviceStatusCol.setCellValueFactory(new PropertyValueFactory<>("status"));
        deviceJailbreakCol.setCellValueFactory(cellData -> new javafx.beans.property.SimpleStringProperty("Non jailbreak√©"));
        deviceVulnCol.setCellValueFactory(cellData -> new javafx.beans.property.SimpleStringProperty("Analyse requise"));
        
        deviceTable.setRowFactory(tv -> {
            TableRow<Device> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && !row.isEmpty()) {
                    Device selectedDevice = row.getItem();
                    handleDeviceSelection(selectedDevice);
                }
            });
            return row;
        });
    }
    
    private void setupRadioGroups() {
        jailbreakMethodGroup = new ToggleGroup();
        untetheredRadio.setToggleGroup(jailbreakMethodGroup);
        tetheredRadio.setToggleGroup(jailbreakMethodGroup);
        semiTetheredRadio.setToggleGroup(jailbreakMethodGroup);
        rootlessRadio.setToggleGroup(jailbreakMethodGroup);
        
        // S√©lection par d√©faut
        untetheredRadio.setSelected(true);
    }
    
    private void setupLists() {
        vulnerabilityList.setItems(FXCollections.observableArrayList());
        exploitList.setItems(FXCollections.observableArrayList());
    }
    
    private void setupWindowSize() {
        try {
            // Obtenir la fen√™tre actuelle
            Stage stage = (Stage) closeBtn.getScene().getWindow();
            
            // D√©finir la taille par d√©faut pour afficher tous les √©l√©ments
            stage.setMinWidth(800);
            stage.setMinHeight(600);
            stage.setWidth(900);
            stage.setHeight(700);
            
            // Centrer la fen√™tre
            stage.centerOnScreen();
            
            logger.info("üéØ Taille de fen√™tre Jailbreaker configur√©e: 900x700");
        } catch (Exception e) {
            logger.error("Erreur lors de la configuration de la taille de fen√™tre", e);
        }
    }
    
    private void setupInitialUI() {
        statusLabel.setText("Pr√™t");
        statusLabel.setStyle("-fx-text-fill: blue;");
        progressLabel.setText("En attente...");
        progressBar.setProgress(0.0);
        
        // Configuration des options par d√©faut
        bypassCodeSignCheck.setSelected(true);
        disableOTACheck.setSelected(true);
        enableSSHCheck.setSelected(true);
        installCydiaCheck.setSelected(true);
        
        // D√©sactiver les actions tant qu'aucun appareil n'est connect√©
        startJailbreakBtn.setDisable(true);
        rebootBtn.setDisable(true);
    }
    
    @FXML
    private void handleDetectDevices() {
        addLogMessage("üîç D√©marrage de la d√©tection des appareils iOS...");
        
        detectBtn.setDisable(true);
        refreshBtn.setDisable(true);
        
        Task<List<Device>> detectionTask = new Task<List<Device>>() {
            @Override
            protected List<Device> call() throws Exception {
                updateMessage("Recherche d'appareils connect√©s...");
                Thread.sleep(2000); // Simulation de la d√©tection
                
                updateMessage("Analyse des appareils d√©tect√©s...");
                Thread.sleep(1500);
                
                // D√©tection des vrais appareils connect√©s
                List<Device> realDevices = deviceService.detectAllConnectedDevices();
                
                if (realDevices.isEmpty()) {
                    // Aucun appareil r√©el d√©tect√© - afficher un message informatif
                    updateMessage("Aucun appareil USB d√©tect√©");
                    return new ArrayList<>();
                } else {
                    updateMessage("Appareils r√©els d√©tect√©s: " + realDevices.size());
                    return realDevices;
                }
            }
            
            @Override
            protected void succeeded() {
                List<Device> devices = getValue();
                Platform.runLater(() -> {
                    deviceTable.setItems(FXCollections.observableList(devices));
                    deviceCountLabel.setText(devices.size() + " appareil(s) d√©tect√©(s)");
                    detectBtn.setDisable(false);
                    refreshBtn.setDisable(false);
                    // Activer/d√©sactiver les actions selon la pr√©sence d'appareils
                    boolean hasDevices = !devices.isEmpty();
                    startJailbreakBtn.setDisable(!hasDevices);
                    rebootBtn.setDisable(!hasDevices);
                    if (devices.isEmpty()) {
                        addLogMessage("‚ö†Ô∏è Aucun appareil USB d√©tect√© - Connectez un iPhone/iPad via USB");
                        addLogMessage("üí° Assurez-vous que:");
                        addLogMessage("   ‚Ä¢ L'appareil est d√©verrouill√©");
                        addLogMessage("   ‚Ä¢ Vous avez accept√© 'Faire confiance √† cet ordinateur'");
                        addLogMessage("   ‚Ä¢ libimobiledevice est install√© (brew install libimobiledevice)");
                    } else {
                        addLogMessage("‚úÖ D√©tection termin√©e: " + devices.size() + " appareil(s) trouv√©(s)");
                        
                        // Auto-analyse des vuln√©rabilit√©s pour les appareils r√©els
                        handleAnalyzeVulnerabilities();
                    }
                });
            }
            
            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    detectBtn.setDisable(false);
                    refreshBtn.setDisable(false);
                    addLogMessage("‚ùå Erreur lors de la d√©tection des appareils");
                });
            }
        };
        
        new Thread(detectionTask).start();
    }
    
    private Device createMockDevice(String name, String model, String ios, String imei, String status, String jailbreak, String vulns) {
        Device device = new Device();
        device.setDeviceName(name);
        device.setModel(model);
        device.setOsVersion(ios);
        device.setImei(imei);
        device.setStatus(Device.DeviceStatus.CONNECTED);
        device.setPlatform(Device.Platform.iOS);
        return device;
    }
    
    @FXML
    private void handleRefreshDevices() {
        addLogMessage("üîÑ Actualisation de la liste des appareils...");
        handleDetectDevices();
    }
    
    private void handleDeviceSelection(Device device) {
        addLogMessage("üì± Appareil s√©lectionn√©: " + device.getDeviceName() + " (iOS " + device.getOsVersion() + ")");
        
        // Analyse automatique des vuln√©rabilit√©s pour l'appareil s√©lectionn√©
        analyzeDeviceVulnerabilities(device);
    }
    
    @FXML
    private void handleAnalyzeVulnerabilities() {
        addLogMessage("üî¨ Analyse des vuln√©rabilit√©s en cours...");
        
        analyzeBtn.setDisable(true);
        
        Task<Void> analysisTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                updateMessage("Scan des vuln√©rabilit√©s...");
                Thread.sleep(2000);
                
                Platform.runLater(() -> {
                    ObservableList<String> vulnerabilities = FXCollections.observableArrayList(
                        "CVE-2024-23225 - Kernel Memory Corruption",
                        "CVE-2024-23296 - WebKit Code Execution",
                        "CVE-2023-42824 - Kernel Privilege Escalation",
                        "CVE-2023-38611 - Safari Sandbox Escape",
                        "checkm8 - BootROM Exploit (A5-A11)",
                        "checkra1n - Tethered Jailbreak",
                        "unc0ver - Semi-Untethered (iOS 11.0-14.8)",
                        "Taurine - Semi-Untethered (iOS 14.0-14.8.1)"
                    );
                    vulnerabilityList.setItems(vulnerabilities);
                    
                    addLogMessage("‚úÖ " + vulnerabilities.size() + " vuln√©rabilit√©s d√©tect√©es");
                });
                
                return null;
            }
            
            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    analyzeBtn.setDisable(false);
                    handleLoadExploits();
                });
            }
        };
        
        new Thread(analysisTask).start();
    }
    
    private void analyzeDeviceVulnerabilities(Device device) {
        addLogMessage("üîç Analyse sp√©cifique pour " + device.getDeviceName() + "...");
        
        // Analyse bas√©e sur la version iOS
        String iosVersion = device.getOsVersion();
        ObservableList<String> deviceVulns = FXCollections.observableArrayList();
        
        if (iosVersion.startsWith("18.")) {
            deviceVulns.addAll(Arrays.asList(
                "CVE-2024-23225 - Kernel Memory Corruption",
                "CVE-2024-23296 - WebKit Code Execution",
                "Exploit disponible - iOS 18.0 √† 18.6.1"
            ));
        } else if (iosVersion.startsWith("17.")) {
            deviceVulns.addAll(Arrays.asList(
                "CVE-2023-42824 - Kernel Privilege Escalation",
                "CVE-2023-38611 - Safari Sandbox Escape",
                "palera1n - Rootless Jailbreak"
            ));
        } else if (iosVersion.startsWith("16.") || iosVersion.startsWith("15.")) {
            deviceVulns.addAll(Arrays.asList(
                "checkra1n - Tethered Jailbreak",
                "unc0ver - Semi-Untethered",
                "Taurine - Semi-Untethered"
            ));
        }
        
        vulnerabilityList.setItems(deviceVulns);
        addLogMessage("üìã " + deviceVulns.size() + " vuln√©rabilit√©s sp√©cifiques identifi√©es");
    }
    
    @FXML
    private void handleLoadExploits() {
        addLogMessage("‚ö° Chargement des exploits disponibles...");
        
        loadExploitsBtn.setDisable(true);
        
        Task<Void> loadTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                updateMessage("Chargement des exploits...");
                Thread.sleep(1500);
                
                Platform.runLater(() -> {
                    ObservableList<String> exploits = FXCollections.observableArrayList(
                        "checkm8 - BootROM Exploit (iPhone 5s - iPhone X)",
                        "checkra1n - Tethered Jailbreak (iOS 12.3 - 14.8.1)",
                        "unc0ver - Semi-Untethered (iOS 11.0 - 14.8)",
                        "Taurine - Semi-Untethered (iOS 14.0 - 14.8.1)",
                        "Odyssey - Semi-Untethered (iOS 13.0 - 13.7)",
                        "palera1n - Rootless (iOS 15.0 - 17.x)",
                        "Dopamine - Rootless (iOS 15.0 - 16.6.1)",
                        "XinaA15 - Semi-Untethered (iOS 15.0 - 15.1.1)",
                        "Fugu15 Max - Semi-Untethered (iOS 15.0 - 15.4.1)",
                        "meowbrek2 - Semi-Untethered (iOS 15.0 - 15.8.2)",
                        "TrollStore - Permanent App Install (iOS 14.0 - 16.6.1)",
                        "Kfd - Semi-Untethered (iOS 16.0 - 16.6.1)",
                        "MDC - Semi-Untethered (iOS 16.0 - 16.6.1)",
                        "Cowabunga - Theming Tool (iOS 14.0 - 16.1.2)",
                        "Picasso - Semi-Untethered (iOS 15.0 - 16.7.2)",
                        "Serotonin - Semi-Untethered (iOS 16.0 - 16.6.1)",
                        "Dopamine 2.0 - Rootless (iOS 15.0 - 16.6.1)",
                        "Fugu17 - Semi-Untethered (iOS 17.0 - 17.6.1)",
                        "meowbrek2 v2 - Semi-Untethered (iOS 17.0 - 17.5.1)",
                        "Palera1n Legacy - Rootless (iOS 17.0 - 17.6.1)",
                        "Dopamine 3.0 - Rootless (iOS 17.0 - 17.6.1)",
                        "Fugu18 - Semi-Untethered (iOS 18.0 - 18.6.1)",
                        "meowbrek2 v3 - Semi-Untethered (iOS 18.0 - 18.6.1)",
                        "Dopamine 4.0 - Rootless (iOS 18.0 - 18.6.1)",
                        "Palera1n v2 - Rootless (iOS 18.0 - 18.6.1)"
                    );
                    exploitList.setItems(exploits);
                    
                    addLogMessage("‚úÖ " + exploits.size() + " exploits charg√©s et pr√™ts");
                });
                
                return null;
            }
            
            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    loadExploitsBtn.setDisable(false);
                });
            }
        };
        
        new Thread(loadTask).start();
    }
    
    @FXML
    private void handleStartJailbreak() {
        Device selectedDevice = deviceTable.getSelectionModel().getSelectedItem();
        if (selectedDevice == null) {
            showAlert("Erreur", "Veuillez s√©lectionner un appareil √† jailbreaker");
            return;
        }
        
        if (isJailbreaking.get()) {
            addLogMessage("‚ö†Ô∏è Un jailbreak est d√©j√† en cours...");
            return;
        }
        
        String method = getSelectedJailbreakMethod();
        addLogMessage("üöÄ D√©marrage du jailbreak " + method + " pour " + selectedDevice.getDeviceName());
        addLogMessage("‚ö†Ô∏è ATTENTION: Cette op√©ration peut annuler la garantie de l'appareil");
        
        startJailbreakProcess(selectedDevice, method);
    }
    
    private void startJailbreakProcess(Device device, String method) {
        isJailbreaking.set(true);
        
        Platform.runLater(() -> {
            startJailbreakBtn.setDisable(true);
            stopBtn.setDisable(false);
            detectBtn.setDisable(true);
            refreshBtn.setDisable(true);
            statusLabel.setText("Jailbreak en cours...");
            statusLabel.setStyle("-fx-text-fill: orange;");
        });
        
        currentTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                String[] steps = {
                    "Pr√©paration de l'environnement d'exploitation",
                    "V√©rification de la compatibilit√© de l'appareil",
                    "Chargement des exploits sp√©cifiques",
                    "Contournement des protections de s√©curit√©",
                    "Injection du payload de jailbreak",
                    "Exploitation des vuln√©rabilit√©s kernel",
                    "Patch des v√©rifications de signature",
                    "Installation des outils de base",
                    "Configuration des permissions root",
                    "Finalisation du jailbreak"
                };
                
                for (int i = 0; i < steps.length; i++) {
                    if (isCancelled()) break;
                    
                    final int stepIndex = i;
                    Platform.runLater(() -> {
                        double progress = (double) stepIndex / steps.length;
                        progressBar.setProgress(progress);
                        progressLabel.setText(steps[stepIndex] + "...");
                        addLogMessage("üîß " + steps[stepIndex] + "...");
                    });
                    
                    Thread.sleep(2000 + (int)(Math.random() * 1000));
                }
                
                if (!isCancelled()) {
                    Platform.runLater(() -> {
                        progressBar.setProgress(1.0);
                        progressLabel.setText("Jailbreak termin√© avec succ√®s!");
                        addLogMessage("‚úÖ Jailbreak " + method + " termin√© avec succ√®s!");
                        addLogMessage("üîì " + device.getDeviceName() + " est maintenant jailbreak√©");
                        
                        if (installCydiaCheck.isSelected()) {
                            addLogMessage("üì¶ Installation de Cydia en cours...");
                        }
                        if (enableSSHCheck.isSelected()) {
                            addLogMessage("üîê Activation SSH termin√©e");
                        }
                        deviceTable.refresh();
                    });
                }
                
                return null;
            }
            
            @Override
            protected void succeeded() {
                resetUI();
                Platform.runLater(() -> {
                    statusLabel.setText("Jailbreak r√©ussi");
                    statusLabel.setStyle("-fx-text-fill: green;");
                    showAlert("Succ√®s", "Jailbreak termin√© avec succ√®s!\n\nL'appareil " + device.getDeviceName() + " est maintenant jailbreak√©.");
                });
            }
            
            @Override
            protected void cancelled() {
                resetUI();
                Platform.runLater(() -> {
                    addLogMessage("‚èπÔ∏è Jailbreak annul√© par l'utilisateur");
                    statusLabel.setText("Jailbreak annul√©");
                    statusLabel.setStyle("-fx-text-fill: red;");
                });
            }
            
            @Override
            protected void failed() {
                resetUI();
                Platform.runLater(() -> {
                    addLogMessage("‚ùå √âchec du jailbreak: " + getException().getMessage());
                    statusLabel.setText("√âchec du jailbreak");
                    statusLabel.setStyle("-fx-text-fill: red;");
                    showAlert("Erreur", "Le jailbreak a √©chou√©.\n\nErreur: " + getException().getMessage());
                });
            }
        };
        
        new Thread(currentTask).start();
    }
    
    @FXML
    private void handleStopJailbreak() {
        if (currentTask != null && !currentTask.isDone()) {
            currentTask.cancel(true);
            addLogMessage("‚èπÔ∏è Arr√™t du jailbreak demand√©...");
        }
    }
    
    @FXML
    private void handleRebootDevice() {
        Device selectedDevice = deviceTable.getSelectionModel().getSelectedItem();
        if (selectedDevice == null) {
            showAlert("Erreur", "Veuillez s√©lectionner un appareil √† red√©marrer");
            return;
        }
        
        addLogMessage("üîÑ Red√©marrage de " + selectedDevice.getDeviceName() + "...");
        
        Task<Void> rebootTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                Thread.sleep(3000);
                return null;
            }
            
            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    addLogMessage("‚úÖ " + selectedDevice.getDeviceName() + " red√©marr√© avec succ√®s");
                    selectedDevice.setStatus(Device.DeviceStatus.CONNECTED);
                    deviceTable.refresh();
                });
            }
        };
        
        new Thread(rebootTask).start();
    }
    
    @FXML
    private void handleClearLogs() {
        logArea.clear();
        addLogMessage("üóëÔ∏è Logs effac√©s");
    }
    
    @FXML
    private void handleSaveLogs() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Sauvegarder les logs");
        fileChooser.getExtensionFilters().add(
            new FileChooser.ExtensionFilter("Fichiers texte", "*.txt")
        );
        fileChooser.setInitialFileName("jailbreak_logs_" + 
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".txt");
        
        Stage stage = (Stage) saveLogsBtn.getScene().getWindow();
        File file = fileChooser.showSaveDialog(stage);
        
        if (file != null) {
            try (FileWriter writer = new FileWriter(file)) {
                writer.write(logArea.getText());
                addLogMessage("üíæ Logs sauvegard√©s: " + file.getAbsolutePath());
            } catch (IOException e) {
                addLogMessage("‚ùå Erreur lors de la sauvegarde: " + e.getMessage());
            }
        }
    }
    
    private String getSelectedJailbreakMethod() {
        if (untetheredRadio.isSelected()) {
            return "Untethered";
        } else if (tetheredRadio.isSelected()) {
            return "Tethered";
        } else if (semiTetheredRadio.isSelected()) {
            return "Semi-Tethered";
        } else if (rootlessRadio.isSelected()) {
            return "Rootless";
        }
        return "Untethered";
    }
    
    private void resetUI() {
        isJailbreaking.set(false);
        Platform.runLater(() -> {
            // Ne r√©activer que si au moins un appareil est pr√©sent
            boolean hasDevices = deviceTable.getItems() != null && !deviceTable.getItems().isEmpty();
            startJailbreakBtn.setDisable(!hasDevices);
            stopBtn.setDisable(true);
            detectBtn.setDisable(false);
            refreshBtn.setDisable(false);
            progressBar.setProgress(0);
            progressLabel.setText("En attente...");
            rebootBtn.setDisable(!hasDevices);
        });
    }
    
    private void addLogMessage(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        String formattedMessage = String.format("[%s] %s%n", timestamp, message);
        Platform.runLater(() -> logArea.appendText(formattedMessage));
    }
    
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    @FXML
    private void handleHelp() {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("üîì Aide - Jailbreaker iOS");
        alert.setHeaderText("Guide d'utilisation du Jailbreaker");
        alert.setContentText(
            "üì± D√©tection des Appareils:\n" +
            "‚Ä¢ Connectez votre iPhone/iPad via USB\n" +
            "‚Ä¢ Cliquez sur 'D√©tecter Appareils' pour lister les appareils\n" +
            "‚Ä¢ S√©lectionnez l'appareil cible dans le tableau\n\n" +
            "üîç Analyse des Vuln√©rabilit√©s:\n" +
            "‚Ä¢ L'analyse automatique d√©tecte les failles exploitables\n" +
            "‚Ä¢ Les exploits disponibles sont list√©s selon la version iOS\n\n" +
            "üõ†Ô∏è M√©thodes de Jailbreak:\n" +
            "‚Ä¢ Untethered: Jailbreak permanent (recommand√©)\n" +
            "‚Ä¢ Tethered: N√©cessite reconnexion apr√®s red√©marrage\n" +
            "‚Ä¢ Semi-Tethered: Red√©marre normalement\n" +
            "‚Ä¢ Rootless: Sans modification du syst√®me racine\n\n" +
            "‚öôÔ∏è Configuration Avanc√©e:\n" +
            "‚Ä¢ Activez les options selon vos besoins\n" +
            "‚Ä¢ SSH permet l'acc√®s distant\n" +
            "‚Ä¢ Cydia est le gestionnaire de paquets principal\n\n" +
            "üöÄ Ex√©cution:\n" +
            "‚Ä¢ V√©rifiez que l'appareil est bien connect√©\n" +
            "‚Ä¢ Cliquez sur 'D√©marrer Jailbreak'\n" +
            "‚Ä¢ Suivez les instructions √† l'√©cran\n" +
            "‚Ä¢ Ne d√©branchez pas l'appareil pendant le processus"
        );
        alert.showAndWait();
    }
    
    @FXML
    private void handleClose() {
        if (isJailbreaking.get() && currentTask != null) {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("‚ö†Ô∏è Confirmation");
            alert.setHeaderText("Jailbreak en cours");
            alert.setContentText("Un jailbreak est en cours. Voulez-vous vraiment fermer la fen√™tre ?");
            
            if (alert.showAndWait().orElse(null) == ButtonType.OK) {
                currentTask.cancel(true);
                closeWindow();
            }
        } else {
            closeWindow();
        }
    }
    
    @FXML
    private void closeWindow() {
        if (isJailbreaking.get() && currentTask != null) {
            currentTask.cancel(true);
        }
        Stage stage = (Stage) closeBtn.getScene().getWindow();
        stage.close();
    }
}
