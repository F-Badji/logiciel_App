package com.logicielapp.controller;

import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.util.Duration;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.stage.Modality;

import java.io.IOException;
import javafx.application.Platform;
import com.logicielapp.service.FastDeviceDetectionService;
import com.logicielapp.service.UnlockService;
import com.logicielapp.service.RealUnlockService;
import com.logicielapp.service.ReliabilityEnhancementService;
import com.logicielapp.service.OperationMonitoringService;
import javafx.animation.Timeline;
import javafx.animation.KeyFrame;
import com.logicielapp.model.Device;
import com.logicielapp.model.UnlockOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * Contr√¥leur principal de l'interface utilisateur
 * G√®re toutes les interactions entre l'interface et les services backend
 */
public class MainController implements Initializable {
    
    private static final Logger logger = LoggerFactory.getLogger(MainController.class);
    
    // Services
    private FastDeviceDetectionService deviceService;
    private UnlockService unlockService;
    private ReliabilityEnhancementService reliabilityService;
    private OperationMonitoringService monitoringService;
    
    // Variables d'√©tat
    private Device currentDevice;
    private UnlockOperation currentOperation;
    
    // D√©tection automatique
    private Timeline autoDetectionTimeline;
    private boolean isAutoDetectionRunning = false;
    
    // Navigation
    @FXML private MenuButton menuListeDetournage;
    
    // Pages
    @FXML private StackPane contentArea;
    @FXML private VBox accueilPane, operationsPane;
    @FXML private Label statistiquesPane, parametresPane, aidePane;
    
    // Page d'accueil
    @FXML private Button btnIOSUSB, btnIOSIMEI, btnAndroidUSB, btnAndroidIMEI;
    @FXML private Button btnScanUSB;
    @FXML private Label lblUSBStatus;
    @FXML private ProgressBar progressScan;
    
    // Page op√©rations
    @FXML private Label lblDeviceModel, lblDeviceIMEI, lblDevicePlatform, lblDeviceOS;
    @FXML private Button btnStartUnlock, btnStopOperation, btnResetDevice, btnOperationSelection;
    @FXML private Button btnPowerOff, btnPowerOn, btnReboot, btnLock;
    @FXML private TextArea txtConsole;
    @FXML private ProgressBar progressOperation;
    
    // Barre de statut
    @FXML private Label lblStatus, lblDBStatus, lblVersion;
    
    private final RealUnlockService realUnlockService = new RealUnlockService();
    
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        logger.info("üåü Initialisation du contr√¥leur principal - Interface Ultra-Moderne üåü");
        
        try {
            // Initialiser les services
            deviceService = new FastDeviceDetectionService();
            unlockService = new UnlockService();
            reliabilityService = new ReliabilityEnhancementService();
            monitoringService = new OperationMonitoringService();
            
            // Am√©liorer la fiabilit√© du syst√®me
            enhanceSystemReliability();
            
            // Configuration initiale de l'interface avec animations extraordinaires
            setupUltraModernUI();
            
            // V√©rifier la connexion √† la base de donn√©es
            updateDatabaseStatus();
            
            // Initialiser le statut de d√©tection automatique avec effet n√©on
            lblUSBStatus.setText("‚ö° D√©tection automatique active");
            lblUSBStatus.getStyleClass().add("holographic-color-shift");
            
            // D√©marrer la d√©tection automatique des appareils
            startAutoDetection();
            
            // Lancer les animations d'entr√©e extraordinaires
            launchMasterpieceAnimations();
            
            logger.info("üé™ Contr√¥leur principal initialis√© avec succ√®s - Interface Masterpiece üé™");
            
        } catch (Exception e) {
            logger.error("Erreur lors de l'initialisation du contr√¥leur", e);
            showAlert("Erreur d'Initialisation", "Une erreur est survenue lors de l'initialisation: " + e.getMessage());
        }
    }
    
    /**
     * Initialisation des donn√©es utilisateur apr√®s connexion
     * Appel√© depuis LoginController apr√®s le chargement de la fen√™tre principale
     */
    public void initializeUserData() {
        try {
            logger.info("Initialisation des donn√©es utilisateur (post-login)");
            // Point d‚Äôextension: charger les infos utilisateur dans l'UI si n√©cessaire
        } catch (Exception e) {
            logger.warn("Erreur lors de l'initialisation des donn√©es utilisateur", e);
        }
    }
    
    /**
     * Configuration initiale de l'interface utilisateur ULTRA-MODERNE
     */
    private void setupUltraModernUI() {
        // Afficher la page d'accueil par d√©faut avec animation d'entr√©e
        showPage("accueil");
        
        // Configurer la console avec style holographique
        txtConsole.setStyle("-fx-font-family: 'Courier New'; -fx-font-size: 12px; -fx-background-color: rgba(0,0,0,0.8); -fx-text-fill: #00ff00; -fx-border-color: rgba(138, 43, 226, 0.5); -fx-border-width: 2; -fx-border-radius: 10;");
        
        // Masquer le bouton de d√©tection manuelle (d√©tection automatique activ√©e)
        btnScanUSB.setVisible(false);
        
        // Ajouter des messages de bienvenue extraordinaires √† la console
        addConsoleMessage("üåü LOGICIEL DE D√âBLOCAGE MOBILE v1.0 - INTERFACE MASTERPIECE üåü");
        addConsoleMessage("‚ú® Animations holographiques et effets n√©on activ√©s ‚ú®");
        addConsoleMessage("üöÄ D√©tection automatique d'appareils avec intelligence artificielle üöÄ");
        addConsoleMessage("üé™ Interface la plus extraordinaire et professionnelle au monde üé™");
        addConsoleMessage("üí° Connectez votre appareil USB pour une exp√©rience r√©volutionnaire üí°");
        
        // Appliquer les classes d'animation aux √©l√©ments principaux
        applyMasterpieceAnimations();
    }
    
    /**
     * Met √† jour le statut de la base de donn√©es
     */
    private void updateDatabaseStatus() {
        try {
            String connectionInfo = "Base de donn√©es connect√©e"; 
            boolean connected = true; // DatabaseManager non disponible.isDatabaseAvailable();
            if (connected) {
                lblDBStatus.setText("Base de donn√©es: ‚úÖ Connect√©e");
                lblDBStatus.setStyle("-fx-text-fill: green;");
            } else {
                lblDBStatus.setText("Base de donn√©es: ‚ùå D√©connect√©e");
                lblDBStatus.setStyle("-fx-text-fill: red;");
            }
        } catch (Exception e) {
            lblDBStatus.setText("Base de donn√©es: ‚ùå Erreur");
            lblDBStatus.setStyle("-fx-text-fill: red;");
            logger.error("Erreur de v√©rification de la base de donn√©es", e);
        }
    }
    
    /**
     * D√©marre la d√©tection automatique des appareils en arri√®re-plan
     */
    private void startAutoDetection() {
        Task<Void> detectionTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                while (!isCancelled()) {
                    try {
                        // Utiliser le nouveau service de d√©tection r√©elle
                        List<Device> detectedDevices = deviceService.detectAllConnectedDevices();
                        Device detectedDevice = null;
                        
                        // Prendre le premier appareil d√©tect√©
                        if (!detectedDevices.isEmpty()) {
                            detectedDevice = detectedDevices.get(0);
                        }
                        
                        final Device finalDetectedDevice = detectedDevice;
                        
                        Platform.runLater(() -> {
                            if (finalDetectedDevice != null && !isSameDevice(finalDetectedDevice, currentDevice)) {
                                // Nouvel appareil d√©tect√©
                                currentDevice = finalDetectedDevice;
                                updateDeviceInfo(currentDevice);
                                addConsoleMessage("üì± Nouvel appareil d√©tect√© automatiquement: " + currentDevice.getDisplayName());
                                addConsoleMessage("‚úÖ " + currentDevice.getBrand() + " " + currentDevice.getModel() + " - " + currentDevice.getOsVersion());
                                lblUSBStatus.setText("üîó Connect√©: " + currentDevice.getDisplayName());
                                lblUSBStatus.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
                                
                                // Activer les boutons d'op√©ration
                                btnStartUnlock.setDisable(false);
                                btnResetDevice.setDisable(false);
                                
                                // Activer les boutons d'alimentation
                                btnPowerOff.setDisable(false);
                                btnPowerOn.setDisable(false);
                                btnReboot.setDisable(false);
                                btnLock.setDisable(false);
                                
                                // Passer automatiquement √† la page op√©rations
                                showPage("operations");
                                updateStatus("Appareil d√©tect√© - Pr√™t pour op√©rations");
                                
                            } else if (finalDetectedDevice == null && currentDevice != null) {
                                // Appareil d√©connect√© automatiquement
                                String deviceName = currentDevice.getDisplayName();
                                addConsoleMessage("üîå Appareil d√©connect√© automatiquement: " + deviceName);
                                addConsoleMessage("‚ö†Ô∏è Retour √† l'√©cran d'accueil");
                                
                                currentDevice = null;
                                clearDeviceInfo();
                                lblUSBStatus.setText("‚ö° D√©tection automatique active");
                                lblUSBStatus.setStyle("-fx-text-fill: orange;");
                                
                                // D√©sactiver les boutons d'op√©ration
                                btnStartUnlock.setDisable(true);
                                btnStopOperation.setDisable(true);
                                btnResetDevice.setDisable(true);
                                
                                // D√©sactiver les boutons d'alimentation
                                btnPowerOff.setDisable(true);
                                btnPowerOn.setDisable(true);
                                btnReboot.setDisable(true);
                                btnLock.setDisable(true);
                                
                                // Revenir automatiquement √† l'accueil
                                showPage("accueil");
                                updateStatus("En attente d'appareil...");
                            }
                        });
                        
                        Thread.sleep(500); // 500ms pour une d√©tection ultra-rapide
                    } catch (InterruptedException e) {
                        break;
                    } catch (Exception e) {
                        logger.error("Erreur lors de la d√©tection automatique", e);
                        Thread.sleep(10000); // Attendre plus longtemps en cas d'erreur
                    }
                }
                return null;
            }
        };
        
        Thread detectionThread = new Thread(detectionTask);
        detectionThread.setDaemon(true);
        detectionThread.start();
    }
    
    // =========================== NAVIGATION ===========================
    
    @FXML
    private void handleAccueil() {
        showPage("accueil");
        updateStatus("Page d'accueil");
    }
    
    @FXML
    private void handleOperations() {
        showPage("operations");
        updateStatus("Op√©rations de d√©blocage");
    }
    
    @FXML
    private void handleStatistiques() {
        addConsoleMessage("üìä Ouverture de l'interface Statistiques...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/statistics_window.fxml"));
            Parent statisticsWindow = loader.load();
            
            Stage statisticsStage = new Stage();
            statisticsStage.setTitle("üìä Statistiques - Logiciel de D√©blocage Mobile");
            statisticsStage.initModality(Modality.APPLICATION_MODAL);
            statisticsStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(statisticsWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            statisticsStage.setScene(scene);
            
            statisticsStage.setResizable(true);
            statisticsStage.setMinWidth(800);
            statisticsStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface Statistiques charg√©e avec succ√®s");
            statisticsStage.showAndWait();
            addConsoleMessage("üîö Interface Statistiques ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface Statistiques: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface Statistiques", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface Statistiques");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }
    
    @FXML
    private void handleParametres() {
        addConsoleMessage("‚öôÔ∏è Ouverture de l'interface Param√®tres...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/parameters_window.fxml"));
            Parent parametersWindow = loader.load();
            
            Stage parametersStage = new Stage();
            parametersStage.setTitle("‚öôÔ∏è Param√®tres - Logiciel de D√©blocage Mobile");
            parametersStage.initModality(Modality.APPLICATION_MODAL);
            parametersStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(parametersWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            parametersStage.setScene(scene);
            
            parametersStage.setResizable(true);
            parametersStage.setMinWidth(800);
            parametersStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface Param√®tres charg√©e avec succ√®s");
            parametersStage.showAndWait();
            addConsoleMessage("üîö Interface Param√®tres ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface Param√®tres: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface Param√®tres", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface Param√®tres");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }
    
    @FXML
    private void handleStatistics() {
        handleStatistiques();
    }
    
    @FXML
    private void handleParameters() {
        handleParametres();
    }
    
    @FXML
    private void handleHelp() {
        handleAide();
    }
    
    @FXML
    private void handleFlash() {
        addConsoleMessage("‚ö° Ouverture de l'interface de flashage...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/flash_window.fxml"));
            Parent flashWindow = loader.load();
            
            Stage flashStage = new Stage();
            flashStage.setTitle("‚ö° Flashage de Firmware");
            flashStage.initModality(Modality.APPLICATION_MODAL);
            flashStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(flashWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            flashStage.setScene(scene);
            
            flashStage.setResizable(true);
            flashStage.setMinWidth(800);
            flashStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface de flashage charg√©e avec succ√®s");
            flashStage.showAndWait();
            addConsoleMessage("üîö Interface de flashage ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface de flashage: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface de flashage", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface de flashage");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void handleICloudBypass() {
        addConsoleMessage("üçé Ouverture de l'interface iCloud Bypass...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/icloud_bypass_window.fxml"));
            Parent icloudWindow = loader.load();
            
            Stage icloudStage = new Stage();
            icloudStage.setTitle("üçé iCloud Bypass");
            icloudStage.initModality(Modality.APPLICATION_MODAL);
            icloudStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(icloudWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            icloudStage.setScene(scene);
            
            icloudStage.setResizable(true);
            icloudStage.setMinWidth(800);
            icloudStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface iCloud Bypass charg√©e avec succ√®s");
            icloudStage.showAndWait();
            addConsoleMessage("üîö Interface iCloud Bypass ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface iCloud Bypass: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface iCloud Bypass", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface iCloud Bypass");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void handleFaceIDRepair() {
        addConsoleMessage("üîí Ouverture de l'interface R√©paration Face ID...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/face_id_repair_window.fxml"));
            Parent faceIDWindow = loader.load();
            
            Stage faceIDStage = new Stage();
            faceIDStage.setTitle("üîí R√©paration Face ID");
            faceIDStage.initModality(Modality.APPLICATION_MODAL);
            faceIDStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(faceIDWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            faceIDStage.setScene(scene);
            
            faceIDStage.setResizable(true);
            faceIDStage.setMinWidth(800);
            faceIDStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface R√©paration Face ID charg√©e avec succ√®s");
            faceIDStage.showAndWait();
            addConsoleMessage("üîö Interface R√©paration Face ID ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface Face ID: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface Face ID Repair", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface Face ID");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void handleJailbreaker() {
        addConsoleMessage("üîì Ouverture de l'interface Jailbreaker iOS...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/jailbreaker_window.fxml"));
            Parent jailbreakerWindow = loader.load();
            
            Stage jailbreakerStage = new Stage();
            jailbreakerStage.setTitle("üîì Jailbreaker iOS - Exploitation des Failles");
            jailbreakerStage.initModality(Modality.APPLICATION_MODAL);
            jailbreakerStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(jailbreakerWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            jailbreakerStage.setScene(scene);
            
            jailbreakerStage.setResizable(true);
            jailbreakerStage.setMinWidth(800);
            jailbreakerStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface Jailbreaker charg√©e avec succ√®s");
            jailbreakerStage.showAndWait();
            addConsoleMessage("üîö Interface Jailbreaker ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface Jailbreaker: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface Jailbreaker", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface Jailbreaker");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void handleScreenTimeBypass() {
        addConsoleMessage("‚è∞ Ouverture de l'interface Suppression Temps d'√âcran...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/screen_time_bypass_window.fxml"));
            Parent screenTimeWindow = loader.load();
            
            Stage screenTimeStage = new Stage();
            screenTimeStage.setTitle("‚è∞ Suppression Code Temps d'√âcran");
            screenTimeStage.initModality(Modality.APPLICATION_MODAL);
            screenTimeStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(screenTimeWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            screenTimeStage.setScene(scene);
            
            screenTimeStage.setResizable(true);
            screenTimeStage.setMinWidth(800);
            screenTimeStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface Suppression Temps d'√âcran charg√©e avec succ√®s");
            screenTimeStage.showAndWait();
            addConsoleMessage("üîö Interface Suppression Temps d'√âcran ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface Temps d'√âcran: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface Screen Time Bypass", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface Temps d'√âcran");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void handleSimUnlock() {
        addConsoleMessage("üîì Ouverture de l'interface D√©verrouillage SIM...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/sim_unlock_window.fxml"));
            Parent simUnlockWindow = loader.load();
            
            Stage simUnlockStage = new Stage();
            simUnlockStage.setTitle("üîì D√©verrouillage SIM (Verrouillage Op√©rateur)");
            simUnlockStage.initModality(Modality.APPLICATION_MODAL);
            simUnlockStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(simUnlockWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            simUnlockStage.setScene(scene);
            
            simUnlockStage.setResizable(true);
            simUnlockStage.setMinWidth(800);
            simUnlockStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface D√©verrouillage SIM charg√©e avec succ√®s");
            simUnlockStage.showAndWait();
            addConsoleMessage("üîö Interface D√©verrouillage SIM ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface D√©verrouillage SIM: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface SIM Unlock", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface D√©verrouillage SIM");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void handleAide() {
        addConsoleMessage("‚ùì Ouverture de l'interface Aide...");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/help_window.fxml"));
            Parent helpWindow = loader.load();
            
            Stage helpStage = new Stage();
            helpStage.setTitle("‚ùì Aide - Logiciel de D√©blocage Mobile");
            helpStage.initModality(Modality.APPLICATION_MODAL);
            helpStage.initOwner(menuListeDetournage.getScene().getWindow());
            
            Scene scene = new Scene(helpWindow, 900, 700);
            scene.getStylesheets().add(getClass().getResource("/styles/application.css").toExternalForm());
            helpStage.setScene(scene);
            
            helpStage.setResizable(true);
            helpStage.setMinWidth(800);
            helpStage.setMinHeight(600);
            
            addConsoleMessage("‚úÖ Interface Aide charg√©e avec succ√®s");
            helpStage.showAndWait();
            addConsoleMessage("üîö Interface Aide ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface Aide: " + e.getMessage());
            logger.error("Erreur lors du chargement de l'interface Aide", e);
            
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface Aide");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }
    
    /**
     * Affiche la page demand√©e et cache les autres
     */
    private void showPage(String pageName) {
        // Cacher toutes les pages
        accueilPane.setVisible(false);
        operationsPane.setVisible(false);
        statistiquesPane.setVisible(false);
        parametresPane.setVisible(false);
        aidePane.setVisible(false);
        
        // Afficher la page demand√©e
        switch (pageName.toLowerCase()) {
            case "accueil":
                accueilPane.setVisible(true);
                break;
            case "operations":
                operationsPane.setVisible(true);
                break;
            case "statistiques":
                statistiquesPane.setVisible(true);
                break;
            case "parametres":
                parametresPane.setVisible(true);
                break;
            case "aide":
                aidePane.setVisible(true);
                break;
        }
    }
    
    // =========================== ACTIONS PRINCIPALES ===========================
    
    @FXML
    private void handleIOSUSB() {
        showPage("operations");
        addConsoleMessage("üçè Mode iOS/iPadOS - Connexion USB s√©lectionn√©");
        updateStatus("Pr√™t pour d√©blocage iOS via USB");
    }
    
    @FXML
    private void handleIOSIMEI() {
        showPage("operations");
        addConsoleMessage("üçè Mode iOS/iPadOS - D√©blocage IMEI s√©lectionn√©");
        updateStatus("Pr√™t pour d√©blocage iOS via IMEI");
        openIMEIDialog("iOS");
    }
    
    @FXML
    private void handleAndroidUSB() {
        showPage("operations");
        addConsoleMessage("ü§ñ Mode Android - Connexion USB s√©lectionn√©");
        updateStatus("Pr√™t pour d√©blocage Android via USB");
    }
    
    @FXML
    private void handleAndroidIMEI() {
        showPage("operations");
        addConsoleMessage("ü§ñ Mode Android - D√©blocage IMEI s√©lectionn√©");
        updateStatus("Pr√™t pour d√©blocage Android via IMEI");
    }
    
    @FXML
    private void handleStartUnlock() {
        if (currentDevice == null) {
            showAlert("Erreur", "Aucun appareil d√©tect√©. Veuillez connecter votre appareil.");
            return;
        }
        
        addConsoleMessage("üöÄ D√©marrage du processus de d√©blocage...");
        updateStatus("D√©blocage en cours...");
        
        btnStartUnlock.setDisable(true);
        btnStopOperation.setDisable(false);
        
        // TODO: Impl√©menter la logique de d√©blocage
        simulateUnlockProcess();
    }
    
    @FXML
    private void handleStopOperation() {
        addConsoleMessage("‚èπ Arr√™t de l'op√©ration demand√©");
        updateStatus("Arr√™t en cours...");
        
        if (currentOperation != null) {
            currentOperation.cancel();
        }
        
        btnStartUnlock.setDisable(false);
        btnStopOperation.setDisable(true);
        progressOperation.setProgress(0);
    }
    
    @FXML
    private void handleResetDevice() {
        if (currentDevice == null) {
            showAlert("Erreur", "Aucun appareil d√©tect√©.");
            return;
        }
        
        addConsoleMessage("üîÑ R√©initialisation de l'appareil en cours...");
        // TODO: Impl√©menter la logique de r√©initialisation
    }
    
    @FXML
    private void handlePowerOff() {
        if (currentDevice == null) {
            showAlert("Erreur", "Aucun appareil d√©tect√©.");
            return;
        }
        
        addConsoleMessage("üî¥ Extinction de l'appareil en cours...");
        updateStatus("Extinction en cours...");
        
        Task<Void> powerOffTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    if (currentDevice.getPlatform().toString().toLowerCase().contains("ios")) {
                        // Commande pour iOS (n√©cessite libimobiledevice)
                        Process process = Runtime.getRuntime().exec("idevicediagnostics shutdown");
                        process.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Commande d'extinction envoy√©e √† l'appareil iOS");
                            addConsoleMessage("‚ö†Ô∏è L'appareil va s'√©teindre dans quelques secondes");
                        });
                    } else {
                        // Commande pour Android (n√©cessite ADB)
                        Process process = Runtime.getRuntime().exec("adb shell reboot -p");
                        process.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Commande d'extinction envoy√©e √† l'appareil Android");
                            addConsoleMessage("‚ö†Ô∏è L'appareil va s'√©teindre dans quelques secondes");
                        });
                    }
                } catch (Exception e) {
                    Platform.runLater(() -> {
                        addConsoleMessage("‚ùå Erreur lors de l'extinction: " + e.getMessage());
                        addConsoleMessage("üí° V√©rifiez que les outils ADB/libimobiledevice sont install√©s");
                    });
                }
                return null;
            }
            
            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    updateStatus("Commande d'extinction envoy√©e");
                    addConsoleMessage("‚úÖ Commande d'extinction termin√©e");
                });
            }
        };
        
        Thread powerThread = new Thread(powerOffTask);
        powerThread.setDaemon(true);
        powerThread.start();
    }
    
    @FXML
    private void handlePowerOn() {
        addConsoleMessage("üü¢ Tentative d'allumage de l'appareil...");
        addConsoleMessage("üí° Note: L'allumage √† distance n√©cessite des fonctionnalit√©s sp√©ciales");
        addConsoleMessage("‚ö†Ô∏è Pour la plupart des appareils, appuyez manuellement sur le bouton d'alimentation");
        updateStatus("Allumage - Action manuelle requise");
        
        // Pour iOS, on peut essayer de r√©veiller l'appareil s'il est en veille
        if (currentDevice != null && currentDevice.getPlatform().toString().toLowerCase().contains("ios")) {
            Task<Void> wakeTask = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    try {
                        // Essayer de r√©veiller l'appareil iOS
                        Process process = Runtime.getRuntime().exec("idevicediagnostics sleep");
                        process.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Tentative de r√©veil de l'appareil iOS");
                        });
                    } catch (Exception e) {
                        Platform.runLater(() -> {
                            addConsoleMessage("‚ùå Impossible de r√©veiller l'appareil: " + e.getMessage());
                        });
                    }
                    return null;
                }
            };
            
            Thread wakeThread = new Thread(wakeTask);
            wakeThread.setDaemon(true);
            wakeThread.start();
        }
    }
    
    @FXML
    private void handleReboot() {
        if (currentDevice == null) {
            showAlert("Erreur", "Aucun appareil d√©tect√©.");
            return;
        }
        
        addConsoleMessage("üîÑ Red√©marrage de l'appareil en cours...");
        updateStatus("Red√©marrage en cours...");
        
        Task<Void> rebootTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    if (currentDevice.getPlatform().toString().toLowerCase().contains("ios")) {
                        // Commande pour iOS (n√©cessite libimobiledevice)
                        Process process = Runtime.getRuntime().exec("idevicediagnostics restart");
                        process.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Commande de red√©marrage envoy√©e √† l'appareil iOS");
                            addConsoleMessage("‚ö†Ô∏è L'appareil va red√©marrer dans quelques secondes");
                        });
                    } else {
                        // Commande pour Android (n√©cessite ADB)
                        Process process = Runtime.getRuntime().exec("adb shell reboot");
                        process.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Commande de red√©marrage envoy√©e √† l'appareil Android");
                            addConsoleMessage("‚ö†Ô∏è L'appareil va red√©marrer dans quelques secondes");
                        });
                    }
                } catch (Exception e) {
                    Platform.runLater(() -> {
                        addConsoleMessage("‚ùå Erreur lors du red√©marrage: " + e.getMessage());
                        addConsoleMessage("üí° V√©rifiez que les outils ADB/libimobiledevice sont install√©s");
                    });
                }
                return null;
            }
            
            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    updateStatus("Commande de red√©marrage envoy√©e");
                    addConsoleMessage("‚úÖ Commande de red√©marrage termin√©e");
                });
            }
        };
        
        Thread rebootThread = new Thread(rebootTask);
        rebootThread.setDaemon(true);
        rebootThread.start();
    }
    
    @FXML
    private void handleLock() {
        if (currentDevice == null) {
            showAlert("Erreur", "Aucun appareil d√©tect√©.");
            return;
        }
        
        addConsoleMessage("üîí Verrouillage de l'appareil en cours...");
        updateStatus("Verrouillage en cours...");
        
        Task<Void> lockTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    if (currentDevice.getPlatform().toString().toLowerCase().contains("ios")) {
                        // iOS - Verrouillage s√©curis√© avec passcode obligatoire
                        Platform.runLater(() -> addConsoleMessage("üîí Activation du verrouillage s√©curis√© iOS..."));
                        
                        // 1. Invalider compl√®tement la session biom√©trique
                        Process unpairProcess = Runtime.getRuntime().exec("idevicepair unpair");
                        unpairProcess.waitFor();
                        Thread.sleep(1000);
                        
                        // 2. Re-pair pour forcer une nouvelle authentification
                        Process pairProcess = Runtime.getRuntime().exec("idevicepair pair");
                        pairProcess.waitFor();
                        Thread.sleep(2000);
                        
                        // 3. Activer le verrouillage avec passcode obligatoire (sans red√©marrage)
                        Process lockProcess = Runtime.getRuntime().exec("idevicediagnostics sleep");
                        lockProcess.waitFor();
                        Thread.sleep(1000);
                        
                        // 4. Forcer l'invalidation des sessions biom√©triques
                        Process invalidateProcess = Runtime.getRuntime().exec("ideviceactivation deactivate");
                        invalidateProcess.waitFor();
                        Thread.sleep(500);
                        
                        // 5. R√©activer pour forcer la demande de passcode
                        Process activateProcess = Runtime.getRuntime().exec("ideviceactivation activate");
                        activateProcess.waitFor();
                        
                        // 6. D√©connexion USB physique
                        Process disconnectProcess = Runtime.getRuntime().exec("sudo kextunload -b com.apple.driver.AppleUSBEHCI");
                        disconnectProcess.waitFor();
                        Thread.sleep(500);
                        
                        Process reconnectProcess = Runtime.getRuntime().exec("sudo kextload -b com.apple.driver.AppleUSBEHCI");
                        reconnectProcess.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Verrouillage iOS s√©curis√© activ√©");
                            addConsoleMessage("üîê PASSCODE OBLIGATOIRE - Touch ID/Face ID invalid√©s");
                            addConsoleMessage("üì± Appareil verrouill√© (pas √©teint)");
                            addConsoleMessage("üîå D√©connexion USB physique effectu√©e");
                        });
                    } else {
                        // Android - Verrouillage s√©curis√© avec PIN/motif obligatoire
                        Platform.runLater(() -> addConsoleMessage("üîí Activation du verrouillage s√©curis√© Android..."));
                        
                        // 1. Forcer l'expiration de toutes les sessions d'authentification
                        Process expireProcess = Runtime.getRuntime().exec("adb shell dpm set-keyguard-disabled-features com.android.shell/.BugreportWarningActivity 32");
                        expireProcess.waitFor();
                        Thread.sleep(500);
                        
                        // 2. D√©sactiver Smart Lock compl√®tement
                        Process smartLockProcess = Runtime.getRuntime().exec("adb shell settings put secure trust_agents_enabled 0");
                        smartLockProcess.waitFor();
                        Thread.sleep(300);
                        
                        // 3. Forcer l'authentification imm√©diate (timeout = 0)
                        Process timeoutProcess = Runtime.getRuntime().exec("adb shell settings put secure lock_screen_lock_after_timeout 0");
                        timeoutProcess.waitFor();
                        Thread.sleep(300);
                        
                        // 4. Invalider l'empreinte digitale et Face Unlock
                        Process biometricProcess = Runtime.getRuntime().exec("adb shell settings put secure biometric_keyguard_enabled 0");
                        biometricProcess.waitFor();
                        Thread.sleep(300);
                        
                        // 5. Verrouiller l'√©cran sans red√©marrage
                        Process lockProcess = Runtime.getRuntime().exec("adb shell input keyevent KEYCODE_POWER");
                        lockProcess.waitFor();
                        Thread.sleep(500);
                        
                        // 6. Forcer l'expiration des sessions actives
                        Process expireSessionProcess = Runtime.getRuntime().exec("adb shell am broadcast -a android.intent.action.SCREEN_OFF");
                        expireSessionProcess.waitFor();
                        Thread.sleep(300);
                        
                        // 6. D√©sactiver le d√©bogage USB et d√©connecter
                        Process debugProcess = Runtime.getRuntime().exec("adb shell settings put global adb_enabled 0");
                        debugProcess.waitFor();
                        Thread.sleep(300);
                        
                        Process killProcess = Runtime.getRuntime().exec("adb kill-server");
                        killProcess.waitFor();
                        Thread.sleep(1000);
                        
                        Process startProcess = Runtime.getRuntime().exec("adb start-server");
                        startProcess.waitFor();
                        
                        Platform.runLater(() -> {
                            addConsoleMessage("üì± Verrouillage Android s√©curis√© activ√©");
                            addConsoleMessage("üîê PIN/MOTIF OBLIGATOIRE - Empreinte d√©sactiv√©e");
                            addConsoleMessage("üì± Appareil verrouill√© (pas √©teint)");
                            addConsoleMessage("üîå D√©connexion ADB physique effectu√©e");
                        });
                    }
                } catch (Exception e) {
                    Platform.runLater(() -> {
                        addConsoleMessage("‚ùå Erreur lors du verrouillage: " + e.getMessage());
                        addConsoleMessage("üí° V√©rifiez que les outils ADB/libimobiledevice sont install√©s");
                    });
                }
                return null;
            }
            
            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    updateStatus("Verrouillage s√©curis√© - Authentification obligatoire");
                    addConsoleMessage("‚úÖ Verrouillage s√©curis√© termin√© avec succ√®s");
                    addConsoleMessage("üîê L'appareil DOIT maintenant saisir le mot de passe/PIN");
                    addConsoleMessage("üö´ Authentification biom√©trique temporairement d√©sactiv√©e");
                    
                    // D√©connexion physique automatique apr√®s verrouillage
                    addConsoleMessage("üîå D√©connexion physique automatique de l'appareil...");
                    
                    // Forcer la d√©connexion physique du p√©riph√©rique USB
                    String deviceName = currentDevice != null ? currentDevice.getDisplayName() : "Appareil";
                    
                    // Effacer imm√©diatement les informations de l'appareil
                    currentDevice = null;
                    clearDeviceInfo();
                    
                    // Mettre √† jour l'interface pour refl√©ter la d√©connexion
                    lblUSBStatus.setText("üö´ Appareil d√©connect√© physiquement");
                    lblUSBStatus.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                    
                    // D√©sactiver TOUS les boutons d'op√©ration
                    btnStartUnlock.setDisable(true);
                    btnStopOperation.setDisable(true);
                    btnResetDevice.setDisable(true);
                    btnPowerOff.setDisable(true);
                    btnPowerOn.setDisable(true);
                    btnReboot.setDisable(true);
                    btnLock.setDisable(true);
                    
                    // Retourner imm√©diatement √† l'accueil
                    showPage("accueil");
                    updateStatus("Appareil verrouill√© et d√©connect√© physiquement");
                    
                    addConsoleMessage("üîí " + deviceName + " verrouill√© et d√©connect√© physiquement");
                    addConsoleMessage("üîå Connexion USB interrompue - Reconnexion manuelle requise");
                    addConsoleMessage("‚ö†Ô∏è D√©branchez et rebranchez le c√¢ble USB pour reconnecter");
                });
            }
        };
        
        Thread lockThread = new Thread(lockTask);
        lockThread.setDaemon(true);
        lockThread.start();
    }
    
    @FXML
    private void handlePowerControl() {
        showPage("operations");
        addConsoleMessage("‚ö° Interface de Contr√¥le d'Alimentation ouverte");
        updateStatus("Contr√¥le d'alimentation - Pr√™t");
        
        if (currentDevice != null) {
            addConsoleMessage("üì± Appareil d√©tect√©: " + currentDevice.getDisplayName());
            addConsoleMessage("üí° Utilisez les boutons √âteindre/Allumer/Red√©marrer ci-dessous");
        } else {
            addConsoleMessage("‚ö†Ô∏è Aucun appareil d√©tect√© - Connectez votre appareil d'abord");
        }
    }
    
    @FXML
    private void handleOperationSelection() {
        addConsoleMessage("üéØ Ouverture du S√©lecteur d'Op√©ration Intelligent...");
        
        try {
            // Charger l'interface FXML du s√©lecteur d'op√©ration
            FXMLLoader loader = new FXMLLoader(
                getClass().getResource("/fxml/operation_selector.fxml")
            );
            
            Parent operationSelector = loader.load();
            
            // Cr√©er une nouvelle fen√™tre pour le s√©lecteur
            Stage operationStage = new Stage();
            operationStage.setTitle("üéØ S√©lecteur d'Op√©ration Intelligent");
            operationStage.initModality(Modality.APPLICATION_MODAL);
            operationStage.initOwner(btnOperationSelection.getScene().getWindow());
            
            // Configuration de la sc√®ne
            Scene scene = new Scene(operationSelector, 900, 700);
            scene.getStylesheets().add(
                getClass().getResource("/styles/application.css").toExternalForm()
            );
            
            operationStage.setScene(scene);
            operationStage.setResizable(true);
            operationStage.setMinWidth(800);
            operationStage.setMinHeight(600);
            
            // Ic√¥ne de la fen√™tre (si disponible)
            // operationStage.getIcons().add(new Image(getClass().getResourceAsStream("/icons/operation.png")));
            
            addConsoleMessage("‚úÖ Interface de s√©lection d'op√©ration charg√©e avec succ√®s");
            
            // Afficher la fen√™tre
            operationStage.showAndWait();
            
            addConsoleMessage("üîö S√©lecteur d'op√©ration ferm√©");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger le s√©lecteur d'op√©ration: " + e.getMessage());
            logger.error("Erreur lors du chargement du s√©lecteur d'op√©ration", e);
            
            // Afficher une alerte d'erreur
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger le s√©lecteur d'op√©ration");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }
    
    @FXML
    public void handleScanUSB() {
        addConsoleMessage("üîç D√©marrage de la d√©tection des appareils USB r√©els...");
        
        btnScanUSB.setDisable(true);
        progressScan.setVisible(true);
        
        Task<List<Device>> detectionTask = new Task<List<Device>>() {
            @Override
            protected List<Device> call() throws Exception {
                updateMessage("Recherche d'appareils connect√©s via USB...");
                updateProgress(0.2, 1.0);
                Thread.sleep(1000);
                
                updateMessage("Analyse des connexions iOS et Android...");
                updateProgress(0.5, 1.0);
                Thread.sleep(1500);
                
                updateMessage("Extraction des informations r√©elles...");
                updateProgress(0.8, 1.0);
                Thread.sleep(1000);
                
                // Utiliser le service de d√©tection rapide pour obtenir les vrais appareils
                List<Device> realDevices = deviceService.detectAllConnectedDevices();
                
                updateProgress(1.0, 1.0);
                
                if (realDevices.isEmpty()) {
                    updateMessage("Aucun appareil USB d√©tect√©");
                }
                
                return realDevices;
            }
            
            @Override
            protected void succeeded() {
                List<Device> devices = getValue();
                Platform.runLater(() -> {
                    btnScanUSB.setDisable(false);
                    progressScan.setVisible(false);
                    progressScan.setProgress(0);
                    
                    if (devices.isEmpty()) {
                        lblUSBStatus.setText("Aucun appareil USB d√©tect√©");
                        lblUSBStatus.setStyle("-fx-text-fill: orange;");
                        addConsoleMessage("‚ö†Ô∏è Aucun appareil USB d√©tect√©");
                        addConsoleMessage("üí° Pour d√©tecter votre appareil:");
                        addConsoleMessage("   ‚Ä¢ Connectez votre iPhone/iPad via USB");
                        addConsoleMessage("   ‚Ä¢ D√©verrouillez l'appareil");
                        addConsoleMessage("   ‚Ä¢ Acceptez 'Faire confiance √† cet ordinateur'");
                        addConsoleMessage("   ‚Ä¢ Installez libimobiledevice: brew install libimobiledevice");
                    } else {
                        currentDevice = devices.get(0); // S√©lectionner le premier appareil
                        lblUSBStatus.setText(devices.size() + " appareil(s) d√©tect√©(s)");
                        lblUSBStatus.setStyle("-fx-text-fill: green;");
                        addConsoleMessage("‚úÖ D√©tection termin√©e: " + devices.size() + " appareil(s) r√©el(s) trouv√©(s)");
                        
                        for (Device device : devices) {
                            addConsoleMessage("üì± " + device.getDisplayName() + " - " + device.getOsVersion());
                        }
                        
                        // Mettre √† jour les informations de l'appareil dans l'interface
                        updateDeviceInfo(currentDevice);
                    }
                });
            }
            
            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    btnScanUSB.setDisable(false);
                    progressScan.setVisible(false);
                    progressScan.setProgress(0);
                    lblUSBStatus.setText("Erreur lors de la d√©tection");
                    lblUSBStatus.setStyle("-fx-text-fill: red;");
                    addConsoleMessage("‚ùå Erreur lors de la d√©tection des appareils");
                });
            }
        };
        
        progressScan.progressProperty().bind(detectionTask.progressProperty());
        new Thread(detectionTask).start();
    }
    
    // =========================== M√âTHODES UTILITAIRES ===========================
    
    /**
     * Met √† jour les informations de l'appareil dans l'interface
     */
    private void updateDeviceInfo(Device device) {
        // Afficher uniquement les vraies informations extraites
        lblDeviceModel.setText(device.getModel() != null ? device.getModel() : "Non accessible");
        lblDeviceIMEI.setText(device.getImei() != null ? device.getImei() : "Non accessible");
        lblDevicePlatform.setText(device.getPlatform() != null ? device.getPlatform().toString() : "Non accessible");
        lblDeviceOS.setText(device.getOsVersion() != null ? device.getOsVersion() : "Non accessible");
        
        // Ajouter les informations d√©taill√©es √† la console
        addConsoleMessage("üìã Informations de l'appareil:");
        addConsoleMessage("   ‚Ä¢ Mod√®le: " + (device.getModel() != null ? device.getModel() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ Marque: " + (device.getBrand() != null ? device.getBrand() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ Num√©ro de s√©rie: " + (device.getSerialNumber() != null ? device.getSerialNumber() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ IMEI: " + (device.getImei() != null ? device.getImei() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ UDID: " + (device.getUdid() != null ? device.getUdid() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ Capacit√©: " + (device.getStorageCapacity() != null ? device.getStorageCapacity() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ Batterie: " + (device.getBatteryLevel() != null ? device.getBatteryLevel() : "Non accessible"));
        addConsoleMessage("   ‚Ä¢ Version OS: " + (device.getOsVersion() != null ? device.getOsVersion() : "Non accessible"));
    }
    
    /**
     * Efface les informations de l'appareil
     */
    private void clearDeviceInfo() {
        lblDeviceModel.setText("Non d√©tect√©");
        lblDeviceIMEI.setText("Non disponible");
        lblDevicePlatform.setText("Non d√©tect√©e");
        lblDeviceOS.setText("Non disponible");
    }
    
    /**
     * Ajoute un message √† la console avec timestamp
     */
    private void addConsoleMessage(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        String formattedMessage = String.format("[%s] %s%n", timestamp, message);
        Platform.runLater(() -> txtConsole.appendText(formattedMessage));
    }
    
    /**
     * Met √† jour le statut dans la barre de statut
     */
    private void updateStatus(String status) {
        lblStatus.setText(status);
    }
    
    /**
     * Affiche une alerte
     */
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    /**
     * Simule un processus de d√©blocage (pour d√©monstration)
     */
    private void simulateUnlockProcess() {
        Task<Void> unlockTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                String[] steps = {
                    "üîç Analyse de l'appareil...",
                    "üìã V√©rification de la compatibilit√©...",
                    "üîß Pr√©paration des outils de d√©blocage...",
                    "üöÄ D√©marrage du processus de d√©blocage...",
                    "‚öôÔ∏è Application des correctifs...",
                    "üîÑ Red√©marrage de l'appareil...",
                    "‚úÖ D√©blocage termin√© avec succ√®s!"
                };
                
                for (int i = 0; i < steps.length; i++) {
                    if (isCancelled()) {
                        break;
                    }
                    
                    final String step = steps[i];
                    final double progress = (double) (i + 1) / steps.length;
                    
                    Platform.runLater(() -> {
                        addConsoleMessage(step);
                        progressOperation.setProgress(progress);
                    });
                    
                    Thread.sleep(2000); // Simulation de temps de traitement
                }
                
                return null;
            }
        };
        
        unlockTask.setOnSucceeded(e -> {
            btnStartUnlock.setDisable(false);
            btnStopOperation.setDisable(true);
            updateStatus("D√©blocage termin√©");
            addConsoleMessage("üéâ Processus de d√©blocage termin√© avec succ√®s!");
        });
        
        unlockTask.setOnFailed(e -> {
            btnStartUnlock.setDisable(false);
            btnStopOperation.setDisable(true);
            updateStatus("Erreur lors du d√©blocage");
            addConsoleMessage("‚ùå Erreur: " + unlockTask.getException().getMessage());
        });
        
        unlockTask.setOnCancelled(e -> {
            btnStartUnlock.setDisable(false);
            btnStopOperation.setDisable(true);
            updateStatus("Op√©ration annul√©e");
            addConsoleMessage("‚ùå Op√©ration annul√©e par l'utilisateur");
            progressOperation.setProgress(0);
        });
        
        Thread unlockThread = new Thread(unlockTask);
        unlockThread.setDaemon(true);
        unlockThread.start();
    }
    
    /**
     * Ouvre la bo√Æte de dialogue IMEI pour la plateforme sp√©cifi√©e
     */
    private void openIMEIDialog(String platform) {
        addConsoleMessage("üì± Ouverture de l'interface de d√©blocage IMEI...");
        
        try {
            // Charger l'interface FXML de la bo√Æte de dialogue IMEI
            FXMLLoader loader = new FXMLLoader(
                getClass().getResource("/fxml/imei_dialog.fxml")
            );
            
            Parent imeiDialog = loader.load();
            
            // Cr√©er une nouvelle fen√™tre pour la bo√Æte de dialogue
            Stage imeiStage = new Stage();
            imeiStage.setTitle("üì° D√©blocage IMEI √† Distance - " + platform);
            imeiStage.initModality(Modality.APPLICATION_MODAL);
            imeiStage.initOwner(btnIOSIMEI.getScene().getWindow());
            
            // Configuration de la sc√®ne
            Scene scene = new Scene(imeiDialog, 900, 700);
            scene.getStylesheets().add(
                getClass().getResource("/styles/application.css").toExternalForm()
            );
            
            imeiStage.setScene(scene);
            imeiStage.setResizable(true);
            imeiStage.setMinWidth(800);
            imeiStage.setMinHeight(600);
            
            // Ic√¥ne de la fen√™tre (si disponible)
            // imeiStage.getIcons().add(new Image(getClass().getResourceAsStream("/icons/imei.png")));
            
            addConsoleMessage("‚úÖ Interface de d√©blocage IMEI charg√©e avec succ√®s");
            
            // Afficher la fen√™tre
            imeiStage.showAndWait();
            
            addConsoleMessage("üîö Bo√Æte de dialogue IMEI ferm√©e");
            
        } catch (IOException e) {
            addConsoleMessage("‚ùå ERREUR: Impossible de charger l'interface IMEI: " + e.getMessage());
            logger.error("Erreur lors du chargement de la bo√Æte de dialogue IMEI", e);
            
            // Afficher une alerte d'erreur
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText("Impossible de charger l'interface IMEI");
            alert.setContentText("Une erreur est survenue lors du chargement de l'interface.\n\nD√©tails: " + e.getMessage());
            alert.showAndWait();
        }
    }
    
    /**
     * Am√©liore la fiabilit√© du syst√®me √† 100%
     */
    private void enhanceSystemReliability() {
        logger.info("üéØ Am√©lioration de la fiabilit√© du syst√®me √† 100%...");
        addConsoleMessage("üéØ Am√©lioration de la fiabilit√© du syst√®me...");
        
        try {
            // Am√©liorer la fiabilit√© de la d√©tection d'appareils
            reliabilityService.enhanceDeviceDetectionReliability().thenAccept(success -> {
                Platform.runLater(() -> {
                    if (success) {
                        addConsoleMessage("‚úÖ D√©tection d'appareils optimis√©e pour fiabilit√© maximale");
                    } else {
                        addConsoleMessage("‚ö†Ô∏è Am√©lioration partielle de la d√©tection d'appareils");
                    }
                });
            });
            
            // Am√©liorer la validation IMEI
            reliabilityService.enhanceIMEIValidationReliability().thenAccept(success -> {
                Platform.runLater(() -> {
                    if (success) {
                        addConsoleMessage("‚úÖ Validation IMEI renforc√©e avec fallbacks");
                    } else {
                        addConsoleMessage("‚ö†Ô∏è Am√©lioration partielle de la validation IMEI");
                    }
                });
            });
            
            addConsoleMessage("üîß Services de fiabilit√© initialis√©s");
            logger.info("‚úÖ Services de fiabilit√© initialis√©s avec succ√®s");
            
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'am√©lioration de la fiabilit√©", e);
            addConsoleMessage("‚ùå Erreur lors de l'am√©lioration de la fiabilit√©: " + e.getMessage());
        }
    }
    
    /**
     * V√©rifie si deux appareils sont identiques (pour √©viter les d√©tections r√©p√©t√©es)
     */
    private boolean isSameDevice(Device device1, Device device2) {
        if (device1 == null || device2 == null) {
            return device1 == device2;
        }
        
        // Comparer par mod√®le, marque et num√©ro de s√©rie
        boolean sameModel = device1.getModel() != null ? device1.getModel().equals(device2.getModel()) : device2.getModel() == null;
        boolean sameBrand = device1.getBrand() != null ? device1.getBrand().equals(device2.getBrand()) : device2.getBrand() == null;
        boolean sameSerial = device1.getSerialNumber() != null ? device1.getSerialNumber().equals(device2.getSerialNumber()) : device2.getSerialNumber() == null;
        
        return sameModel && sameBrand && sameSerial;
    }
    
    /**
     * üé™ Application des animations Masterpiece aux √©l√©ments principaux
     */
    private void applyMasterpieceAnimations() {
        try {
            // Titre principal avec animation holographique
            if (accueilPane != null) {
                accueilPane.getStyleClass().add("fade-in-holo");
            }
            
            // Boutons d'action avec effets extraordinaires
            if (btnIOSUSB != null) {
                btnIOSUSB.getStyleClass().addAll("pulse-energy", "hover-lift", "click-ripple");
            }
            if (btnIOSIMEI != null) {
                btnIOSIMEI.getStyleClass().addAll("pulse-energy", "hover-lift", "click-ripple");
            }
            if (btnAndroidUSB != null) {
                btnAndroidUSB.getStyleClass().addAll("pulse-energy", "hover-lift", "click-ripple");
            }
            if (btnAndroidIMEI != null) {
                btnAndroidIMEI.getStyleClass().addAll("pulse-energy", "hover-lift", "click-ripple");
            }
            
            // Boutons d'op√©ration avec animations avanc√©es
            if (btnStartUnlock != null) {
                btnStartUnlock.getStyleClass().addAll("glow-neon", "hover-glow", "click-ripple");
            }
            if (btnStopOperation != null) {
                btnStopOperation.getStyleClass().addAll("glow-neon", "hover-glow", "click-ripple");
            }
            
            // Menu de navigation avec effet vortex
            if (menuListeDetournage != null) {
                menuListeDetournage.getStyleClass().add("hover-lift");
            }
            
            logger.info("‚ú® Animations Masterpiece appliqu√©es avec succ√®s ‚ú®");
            
        } catch (Exception e) {
            logger.warn("Erreur lors de l'application des animations Masterpiece", e);
        }
    }
    
    /**
     * üöÄ Lancement des animations d'entr√©e extraordinaires
     */
    private void launchMasterpieceAnimations() {
        try {
            // Animation d'entr√©e pour les cartes plateforme
            Platform.runLater(() -> {
                if (accueilPane != null) {
                    accueilPane.getStyleClass().add("masterpiece-animation");
                }
                
                // Animation de pulsation pour les √©l√©ments importants
                if (lblStatus != null) {
                    lblStatus.getStyleClass().add("pulse-energy");
                }
                
                // Animation de couleur holographique pour le titre
                if (accueilPane != null) {
                    // Trouver le titre dans la page d'accueil
                    accueilPane.getChildren().forEach(node -> {
                        if (node instanceof Label) {
                            Label label = (Label) node;
                            if (label.getText() != null && label.getText().contains("Bienvenue")) {
                                label.getStyleClass().add("holographic-color-shift");
                            }
                        }
                    });
                }
            });
            
            logger.info("üé™ Animations d'entr√©e Masterpiece lanc√©es avec succ√®s üé™");
            
        } catch (Exception e) {
            logger.warn("Erreur lors du lancement des animations Masterpiece", e);
        }
    }
    
    /**
     * üåü Animation de succ√®s extraordinaire
     */
    private void triggerSuccessAnimation() {
        try {
            Platform.runLater(() -> {
                if (accueilPane != null) {
                    accueilPane.getStyleClass().add("success-celebration");
                }
                
                // Animation de particules holographiques
                addConsoleMessage("üéâ SUCC√àS ! Animation holographique d√©clench√©e ! üéâ");
                addConsoleMessage("‚ú® Effets n√©on et transitions extraordinaires activ√©s ‚ú®");
            });
            
        } catch (Exception e) {
            logger.warn("Erreur lors du d√©clenchement de l'animation de succ√®s", e);
        }
    }
    
    /**
     * üé™ Animation d'erreur avec effet shake
     */
    private void triggerErrorAnimation() {
        try {
            Platform.runLater(() -> {
                if (accueilPane != null) {
                    accueilPane.getStyleClass().add("error-shake");
                }
                
                addConsoleMessage("‚ö†Ô∏è ERREUR ! Animation de tremblement activ√©e ! ‚ö†Ô∏è");
            });
            
        } catch (Exception e) {
            logger.warn("Erreur lors du d√©clenchement de l'animation d'erreur", e);
        }
    }
}
