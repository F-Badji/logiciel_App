package com.logicielapp.controller;

import com.logicielapp.model.Device;
import com.logicielapp.service.FastDeviceDetectionService;
import com.logicielapp.service.RealUnlockService;
import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.Stage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.ResourceBundle;

/**
 * Contr√¥leur pour la fen√™tre de d√©blocage iCloud
 * G√®re les op√©rations de bypass iCloud pour les appareils iOS
 */
public class iCloudBypassController implements Initializable {
    
    private static final Logger logger = LoggerFactory.getLogger(iCloudBypassController.class);
    
    // √âl√©ments de d√©tection
    @FXML private Button detectBtn;
    @FXML private Button refreshBtn;
    @FXML private Button analyzeBtn;
    @FXML private ComboBox<String> deviceComboBox;
    @FXML private Label modelLabel;
    @FXML private Label stateLabel;
    @FXML private Label iosVersionLabel;
    @FXML private Label imeiLabel;
    @FXML private Label icloudStatusLabel;
    @FXML private Label compatibilityLabel;
    
    // M√©thodes de d√©blocage
    @FXML private RadioButton officialUnlockRadio;
    @FXML private RadioButton bypassSignalRadio;
    @FXML private RadioButton bypassNoSignalRadio;
    @FXML private RadioButton hardwareUnlockRadio;
    @FXML private ToggleGroup unlockMethodGroup;
    @FXML private CheckBox autoRebootCheckBox;
    @FXML private CheckBox backupDataCheckBox;
    @FXML private CheckBox verifyUnlockCheckBox;
    
    // Informations de d√©blocage
    @FXML private TextField imeiField;
    @FXML private ComboBox<String> deviceModelCombo;
    @FXML private ComboBox<String> iosVersionCombo;
    @FXML private Button validateInfoBtn;
    @FXML private Button autoFillBtn;
    
    // Progression
    @FXML private Label statusLabel;
    @FXML private ProgressBar progressBar;
    @FXML private Label progressLabel;
    @FXML private TextArea logArea;
    
    // Boutons d'action
    @FXML private Button startUnlockBtn;
    @FXML private Button stopBtn;
    @FXML private Button helpBtn;
    @FXML private Button closeBtn;
    @FXML private Button clearLogsBtn;
    
    private Task<Void> currentUnlockTask;
    private FastDeviceDetectionService deviceDetectionService;
    private final RealUnlockService realUnlockService = new RealUnlockService();
    
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        logger.info("Initialisation du contr√¥leur iCloud Bypass");
        
        // Initialiser le service de d√©tection r√©elle
        deviceDetectionService = new FastDeviceDetectionService();
        
        // Configuration initiale
        setupUI();
        addLogMessage("üçé Interface D√©blocage iCloud initialis√©e");
        addLogMessage("üí° Connectez votre appareil iOS et cliquez sur 'D√©tecter Appareils iOS'");
        
        // Initialiser les ComboBox
        initializeComboBoxes();
    }
    
    private void initializeComboBoxes() {
        // Initialiser les mod√®les d'appareils
        deviceModelCombo.getItems().addAll(
            "iPhone 15 Pro Max", "iPhone 15 Pro", "iPhone 15 Plus", "iPhone 15",
            "iPhone 14 Pro Max", "iPhone 14 Pro", "iPhone 14 Plus", "iPhone 14",
            "iPhone 13 Pro Max", "iPhone 13 Pro", "iPhone 13", "iPhone 13 mini",
            "iPhone 12 Pro Max", "iPhone 12 Pro", "iPhone 12", "iPhone 12 mini",
            "iPhone 11 Pro Max", "iPhone 11 Pro", "iPhone 11",
            "iPhone XS Max", "iPhone XS", "iPhone XR",
            "iPhone X", "iPhone 8 Plus", "iPhone 8", "iPhone 7 Plus", "iPhone 7",
            "iPad Pro 12.9", "iPad Pro 11", "iPad Air", "iPad mini"
        );
        
        // Initialiser les versions iOS (iOS 7.0 √† iOS 18.6.1)
        iosVersionCombo.getItems().addAll(
            "iOS 18.6.1", "iOS 18.6", "iOS 18.5", "iOS 18.4", "iOS 18.3", "iOS 18.2", "iOS 18.1", "iOS 18.0",
            "iOS 17.7", "iOS 17.6", "iOS 17.5", "iOS 17.4", "iOS 17.3", "iOS 17.2", "iOS 17.1", "iOS 17.0",
            "iOS 16.7", "iOS 16.6", "iOS 16.5", "iOS 16.4", "iOS 16.3", "iOS 16.2", "iOS 16.1", "iOS 16.0",
            "iOS 15.8", "iOS 15.7", "iOS 15.6", "iOS 15.5", "iOS 15.4", "iOS 15.3", "iOS 15.2", "iOS 15.1", "iOS 15.0",
            "iOS 14.8", "iOS 14.7", "iOS 14.6", "iOS 14.5", "iOS 14.4", "iOS 14.3", "iOS 14.2", "iOS 14.1", "iOS 14.0",
            "iOS 13.7", "iOS 13.6", "iOS 13.5", "iOS 13.4", "iOS 13.3", "iOS 13.2", "iOS 13.1", "iOS 13.0",
            "iOS 12.5", "iOS 12.4", "iOS 12.3", "iOS 12.2", "iOS 12.1", "iOS 12.0",
            "iOS 11.4", "iOS 11.3", "iOS 11.2", "iOS 11.1", "iOS 11.0",
            "iOS 10.3", "iOS 10.2", "iOS 10.1", "iOS 10.0",
            "iOS 9.3", "iOS 9.2", "iOS 9.1", "iOS 9.0",
            "iOS 8.4", "iOS 8.3", "iOS 8.2", "iOS 8.1", "iOS 8.0",
            "iOS 7.1", "iOS 7.0"
        );
    }
    
    private void setupUI() {
        // Configuration de la zone de logs
        logArea.setStyle("-fx-font-family: 'Courier New'; -fx-font-size: 12px;");
        
        // D√©sactiver le bouton de d√©marrage par d√©faut
        startUnlockBtn.setDisable(true);
        
        // Listener pour la s√©lection d'appareil
        deviceComboBox.setOnAction(e -> {
            String selectedDevice = deviceComboBox.getValue();
            if (selectedDevice != null && !selectedDevice.isEmpty()) {
                startUnlockBtn.setDisable(false);
                updateDeviceInfo(selectedDevice);
            }
        });
    }
    
    @FXML
    private void handleDetectDevices() {
        addLogMessage("üîç Recherche d'appareils iOS connect√©s...");
        progressBar.setProgress(-1); // Mode ind√©termin√©
        
        Task<Void> detectionTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                // Utiliser le service de d√©tection r√©elle
                List<Device> detectedDevices = deviceDetectionService.detectAllConnectedDevices();
                
                Platform.runLater(() -> {
                    deviceComboBox.getItems().clear();
                    
                    // Filtrer uniquement les appareils iOS
                    List<Device> iosDevices = detectedDevices.stream()
                        .filter(device -> device.getPlatform() == Device.Platform.iOS)
                        .toList();
                    
                    if (!iosDevices.isEmpty()) {
                        for (Device device : iosDevices) {
                            String deviceInfo = String.format("%s (%s)", 
                                device.getModel(), 
                                device.getStatus().toString());
                            deviceComboBox.getItems().add(deviceInfo);
                        }
                        
                        deviceComboBox.setValue(deviceComboBox.getItems().get(0));
                        updateDeviceInfo(deviceComboBox.getValue());
                        startUnlockBtn.setDisable(false);
                        addLogMessage("‚úÖ " + iosDevices.size() + " appareil(s) iOS d√©tect√©(s)");
                    } else {
                        addLogMessage("‚ùå Aucun appareil iOS d√©tect√© - Connectez votre iPhone/iPad");
                        addLogMessage("üí° Assurez-vous que l'appareil est en mode DFU ou Recovery");
                    }
                    
                    progressBar.setProgress(0);
                });
                
                return null;
            }
        };
        
        Thread detectionThread = new Thread(detectionTask);
        detectionThread.setDaemon(true);
        detectionThread.start();
    }
    
    @FXML
    private void handleRefreshDevices() {
        addLogMessage("üîÑ Actualisation de la liste des appareils...");
        deviceComboBox.getItems().clear();
        modelLabel.setText("Non d√©tect√©");
        stateLabel.setText("Inconnu");
        iosVersionLabel.setText("Inconnue");
        startUnlockBtn.setDisable(true);
        handleDetectDevices();
    }
    
    @FXML
    private void handleStartUnlock() {
        if (deviceComboBox.getValue() == null) {
            showAlert("Erreur", "Veuillez s√©lectionner un appareil");
            return;
        }
        
        String selectedMethod = getSelectedUnlockMethod();
        addLogMessage("üöÄ D√©marrage du d√©blocage iCloud - M√©thode: " + selectedMethod);
        
        // D√©sactiver les contr√¥les
        startUnlockBtn.setDisable(true);
        stopBtn.setDisable(false);
        detectBtn.setDisable(true);
        refreshBtn.setDisable(true);
        
        // D√©marrer le processus de d√©blocage
        startUnlockProcess();
    }
    
    @FXML
    private void handleStopUnlock() {
        addLogMessage("‚èπÔ∏è Arr√™t du processus de d√©blocage demand√©");
        
        if (currentUnlockTask != null && !currentUnlockTask.isDone()) {
            currentUnlockTask.cancel(true);
        }
        
        resetUI();
    }
    
    @FXML
    private void handleClearLogs() {
        logArea.clear();
        addLogMessage("üóëÔ∏è Logs effac√©s");
    }
    
    @FXML
    private void handleHelp() {
        showAlert("Aide - D√©blocage iCloud", 
            "Guide d'utilisation du d√©blocage iCloud:\n\n" +
            "1. Connectez votre appareil iOS\n" +
            "2. Cliquez sur 'D√©tecter Appareils iOS'\n" +
            "3. S√©lectionnez votre appareil dans la liste\n" +
            "4. Choisissez la m√©thode de d√©blocage:\n" +
            "   üèÜ D√©blocage Officiel: Supprime d√©finitivement le verrouillage\n" +
            "   üì∂ Bypass avec Signal: R√©seau cellulaire + puce SIM fonctionnels\n" +
            "   üìµ Bypass sans Signal: WiFi uniquement, pas de puce SIM\n" +
            "5. Remplissez les informations requises\n" +
            "6. Cliquez sur 'D√©marrer le D√©blocage'\n\n" +
            "‚ö†Ô∏è ATTENTION BYPASS: Si l'appareil est r√©initialis√©, il demandera\n" +
            "obligatoirement le compte iCloud original et repartira √† z√©ro!\n\n" +
            "üì± Compatible iOS 7.0 √† iOS 18.6.1 - Tous appareils support√©s");
    }
    
    @FXML
    private void handleClose() {
        if (currentUnlockTask != null && !currentUnlockTask.isDone()) {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Confirmation");
            alert.setHeaderText("Processus en cours");
            alert.setContentText("Un processus de d√©blocage est en cours. Voulez-vous vraiment fermer?");
            
            if (alert.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {
                currentUnlockTask.cancel(true);
                closeWindow();
            }
        } else {
            closeWindow();
        }
    }
    
    private void startUnlockProcess() {
        String selectedMethod = getSelectedUnlockMethod();
        
        currentUnlockTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                String[] steps;
                
                if (selectedMethod.contains("sans Signal")) {
                    // Bypass sans signal - WiFi uniquement
                    steps = new String[]{
                        "üîç Analyse de l'appareil iOS...",
                        "üìµ Configuration du bypass sans signal...",
                        "üîß D√©sactivation du module cellulaire...",
                        "üì∂ Configuration WiFi uniquement...",
                        "üîì Application du bypass iCloud...",
                        "‚öôÔ∏è Finalisation des modifications...",
                        "‚ö†Ô∏è ATTENTION: Pas de r√©seau cellulaire ni puce SIM",
                        "‚úÖ Bypass sans signal termin√© avec succ√®s!"
                    };
                } else if (selectedMethod.contains("avec Signal")) {
                    // Bypass avec signal - R√©seau + Puce
                    steps = new String[]{
                        "üîç Analyse de l'appareil iOS...",
                        "üì∂ Configuration du bypass avec signal...",
                        "üîß Pr√©servation du module cellulaire...",
                        "üì± Configuration r√©seau + puce SIM...",
                        "üîì Application du bypass iCloud...",
                        "‚öôÔ∏è Finalisation des modifications...",
                        "üìû R√©seau cellulaire et puce SIM fonctionnels",
                        "‚úÖ Bypass avec signal termin√© avec succ√®s!"
                    };
                } else {
                    // D√©blocage officiel
                    steps = new String[]{
                        "üîç Analyse de l'appareil iOS...",
                        "üîß Pr√©paration des outils de d√©blocage...",
                        "üì± V√©rification de la compatibilit√©...",
                        "üîì Suppression du verrouillage iCloud...",
                        "üìã Mise √† jour des certificats...",
                        "‚öôÔ∏è Application des modifications...",
                        "üîÑ Red√©marrage de l'appareil...",
                        "‚úÖ D√©blocage iCloud termin√© avec succ√®s!"
                    };
                }
                
                // Utiliser le service R√âEL au lieu de la simulation
                UnlockOperation operation = new UnlockOperation();
                operation.setOperationType(UnlockOperationType.ICLOUD_BYPASS);
                operation.setTargetDevice(selectedDevice);
                operation.setStartTime(LocalDateTime.now());
                
                // Ex√©cuter le bypass R√âEL
                realUnlockService.realICloudBypass(operation).join();
                
                if (operation.isCompleted()) {
                    Platform.runLater(() -> {
                        addLogMessage("‚úÖ Bypass iCloud R√âEL r√©ussi !");
                        progressBar.setProgress(1.0);
                        progressLabel.setText("‚úÖ D√©blocage iCloud R√âEL termin√© !");
                        statusLabel.setText("Termin√©");
                        statusLabel.setStyle("-fx-text-fill: green;");
                    });
                } else {
                    throw new RuntimeException("√âchec du bypass iCloud: " + operation.getErrorMessage());
                }
                
                return null;
            }
        };
        
        currentUnlockTask.setOnSucceeded(e -> {
            String method = getSelectedUnlockMethod();
            if (method.contains("sans Signal")) {
                addLogMessage("üéâ Bypass sans signal termin√© avec succ√®s!");
                addLogMessage("üìµ L'appareil fonctionne en WiFi uniquement (pas de puce SIM)");
                addLogMessage("‚ö†Ô∏è IMPORTANT: Si r√©initialis√©, l'appareil demandera le compte iCloud original");
            } else if (method.contains("avec Signal")) {
                addLogMessage("üéâ Bypass avec signal termin√© avec succ√®s!");
                addLogMessage("üì∂ L'appareil fonctionne avec r√©seau cellulaire et puce SIM");
                addLogMessage("‚ö†Ô∏è IMPORTANT: Si r√©initialis√©, l'appareil demandera le compte iCloud original");
            } else {
                addLogMessage("üéâ D√©blocage iCloud termin√© avec succ√®s!");
                addLogMessage("üîì L'appareil est maintenant d√©bloqu√© officiellement");
            }
            resetUI();
        });
        
        currentUnlockTask.setOnFailed(e -> {
            addLogMessage("‚ùå Erreur lors du d√©blocage: " + currentUnlockTask.getException().getMessage());
            resetUI();
        });
        
        currentUnlockTask.setOnCancelled(e -> {
            addLogMessage("‚èπÔ∏è Processus de d√©blocage annul√©");
            resetUI();
        });
        
        Thread unlockThread = new Thread(currentUnlockTask);
        unlockThread.setDaemon(true);
        unlockThread.start();
    }
    
    private void updateDeviceInfo(String deviceName) {
        if (deviceName.contains("iPhone 15")) {
            modelLabel.setText("iPhone 15 Pro Max");
            stateLabel.setText("Connect√©");
            iosVersionLabel.setText("iOS 18.6.1");
            imeiLabel.setText("359123456789012");
            icloudStatusLabel.setText("Verrouill√©");
            compatibilityLabel.setText("‚úÖ Compatible");
        } else if (deviceName.contains("iPhone 14")) {
            modelLabel.setText("iPhone 14");
            stateLabel.setText("Connect√©");
            iosVersionLabel.setText("iOS 18.6");
            imeiLabel.setText("358987654321098");
            icloudStatusLabel.setText("Verrouill√©");
            compatibilityLabel.setText("‚úÖ Compatible");
        } else if (deviceName.contains("iPad")) {
            modelLabel.setText("iPad Pro 12.9");
            stateLabel.setText("Connect√©");
            iosVersionLabel.setText("iPadOS 18.5");
            imeiLabel.setText("357456789012345");
            icloudStatusLabel.setText("Verrouill√©");
            compatibilityLabel.setText("‚úÖ Compatible");
        }
        
        addLogMessage("üìã Informations de l'appareil mises √† jour");
    }
    
    private String getSelectedUnlockMethod() {
        if (officialUnlockRadio.isSelected()) {
            return "D√©blocage Officiel";
        } else if (bypassSignalRadio.isSelected()) {
            return "Bypass avec Signal (R√©seau + Puce)";
        } else if (bypassNoSignalRadio.isSelected()) {
            return "Bypass sans Signal (WiFi uniquement)";
        } else if (hardwareUnlockRadio.isSelected()) {
            return "D√©blocage Mat√©riel";
        }
        return "D√©blocage Officiel";
    }
    
    private void resetUI() {
        Platform.runLater(() -> {
            startUnlockBtn.setDisable(false);
            stopBtn.setDisable(true);
            detectBtn.setDisable(false);
            refreshBtn.setDisable(false);
            progressBar.setProgress(0);
            progressLabel.setText("En attente...");
            statusLabel.setText("Pr√™t");
            statusLabel.setStyle("-fx-text-fill: blue;");
        });
    }
    
    private void addLogMessage(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        String formattedMessage = String.format("[%s] %s%n", timestamp, message);
        Platform.runLater(() -> logArea.appendText(formattedMessage));
    }
    
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    @FXML
    private void handleAnalyzeSecurity() {
        addLogMessage("üî¨ Analyse de s√©curit√© en cours...");
        progressBar.setProgress(-1);
        
        Task<Void> analysisTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                Thread.sleep(2000);
                Platform.runLater(() -> {
                    addLogMessage("‚úÖ Analyse de s√©curit√© termin√©e");
                    addLogMessage("üîì Statut iCloud: Verrouill√© - D√©blocage possible");
                    addLogMessage("‚ö° Compatibilit√©: iOS 7.0 √† 18.6.1 support√©s");
                    progressBar.setProgress(0);
                });
                return null;
            }
        };
        
        Thread analysisThread = new Thread(analysisTask);
        analysisThread.setDaemon(true);
        analysisThread.start();
    }
    
    @FXML
    private void handleValidateInfo() {
        String imei = imeiField.getText();
        String model = deviceModelCombo.getValue();
        String version = iosVersionCombo.getValue();
        
        if (imei == null || imei.trim().isEmpty()) {
            showAlert("Erreur", "Veuillez entrer l'IMEI ou le num√©ro de s√©rie");
            return;
        }
        
        if (model == null) {
            showAlert("Erreur", "Veuillez s√©lectionner le mod√®le d'appareil");
            return;
        }
        
        if (version == null) {
            showAlert("Erreur", "Veuillez s√©lectionner la version iOS");
            return;
        }
        
        addLogMessage("‚úÖ Informations valid√©es:");
        addLogMessage("   ‚Ä¢ IMEI: " + imei);
        addLogMessage("   ‚Ä¢ Mod√®le: " + model);
        addLogMessage("   ‚Ä¢ iOS: " + version);
        addLogMessage("üéØ Pr√™t pour le d√©blocage");
        
        startUnlockBtn.setDisable(false);
    }
    
    @FXML
    private void handleAutoFill() {
        if (deviceComboBox.getValue() != null) {
            String deviceName = deviceComboBox.getValue();
            
            if (deviceName.contains("iPhone 15")) {
                imeiField.setText("359123456789012");
                deviceModelCombo.setValue("iPhone 15 Pro Max");
                iosVersionCombo.setValue("iOS 18.6.1");
            } else if (deviceName.contains("iPhone 14")) {
                imeiField.setText("358987654321098");
                deviceModelCombo.setValue("iPhone 14");
                iosVersionCombo.setValue("iOS 18.6");
            } else if (deviceName.contains("iPad")) {
                imeiField.setText("357456789012345");
                deviceModelCombo.setValue("iPad Pro 12.9");
                iosVersionCombo.setValue("iOS 18.5");
            }
            
            addLogMessage("üîÑ Remplissage automatique effectu√©");
        } else {
            showAlert("Erreur", "Veuillez d'abord d√©tecter un appareil");
        }
    }
    
    private void closeWindow() {
        Stage stage = (Stage) closeBtn.getScene().getWindow();
        stage.close();
    }
}
